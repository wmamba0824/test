// Generated by gencpp from file RosAdapter/lane_info.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_LANE_INFO_H
#define ROSADAPTER_MESSAGE_LANE_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct lane_info_
{
  typedef lane_info_<ContainerAllocator> Type;

  lane_info_()
    : u8RoadId(0)
    , u4ObjectId(0)
    , u4Width(0.0)
    , u2Type(0)
    , u1Id(0)
    , u1NeighborMask(0)
    , u1LeftLaneId(0)
    , u1RightLaneId(0)  {
    }
  lane_info_(const ContainerAllocator& _alloc)
    : u8RoadId(0)
    , u4ObjectId(0)
    , u4Width(0.0)
    , u2Type(0)
    , u1Id(0)
    , u1NeighborMask(0)
    , u1LeftLaneId(0)
    , u1RightLaneId(0)  {
  (void)_alloc;
    }



   typedef uint64_t _u8RoadId_type;
  _u8RoadId_type u8RoadId;

   typedef uint32_t _u4ObjectId_type;
  _u4ObjectId_type u4ObjectId;

   typedef float _u4Width_type;
  _u4Width_type u4Width;

   typedef uint16_t _u2Type_type;
  _u2Type_type u2Type;

   typedef int8_t _u1Id_type;
  _u1Id_type u1Id;

   typedef uint8_t _u1NeighborMask_type;
  _u1NeighborMask_type u1NeighborMask;

   typedef int8_t _u1LeftLaneId_type;
  _u1LeftLaneId_type u1LeftLaneId;

   typedef int8_t _u1RightLaneId_type;
  _u1RightLaneId_type u1RightLaneId;





  typedef boost::shared_ptr< ::RosAdapter::lane_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::lane_info_<ContainerAllocator> const> ConstPtr;

}; // struct lane_info_

typedef ::RosAdapter::lane_info_<std::allocator<void> > lane_info;

typedef boost::shared_ptr< ::RosAdapter::lane_info > lane_infoPtr;
typedef boost::shared_ptr< ::RosAdapter::lane_info const> lane_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::lane_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::lane_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::lane_info_<ContainerAllocator1> & lhs, const ::RosAdapter::lane_info_<ContainerAllocator2> & rhs)
{
  return lhs.u8RoadId == rhs.u8RoadId &&
    lhs.u4ObjectId == rhs.u4ObjectId &&
    lhs.u4Width == rhs.u4Width &&
    lhs.u2Type == rhs.u2Type &&
    lhs.u1Id == rhs.u1Id &&
    lhs.u1NeighborMask == rhs.u1NeighborMask &&
    lhs.u1LeftLaneId == rhs.u1LeftLaneId &&
    lhs.u1RightLaneId == rhs.u1RightLaneId;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::lane_info_<ContainerAllocator1> & lhs, const ::RosAdapter::lane_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::lane_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::lane_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::lane_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::lane_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::lane_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::lane_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::lane_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "956c49218f476e72e0ba077080aff039";
  }

  static const char* value(const ::RosAdapter::lane_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x956c49218f476e72ULL;
  static const uint64_t static_value2 = 0xe0ba077080aff039ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::lane_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/lane_info";
  }

  static const char* value(const ::RosAdapter::lane_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::lane_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------ 车道信息 ------ */\n"
"uint64   u8RoadId\n"
"uint32   u4ObjectId\n"
"float32  u4Width\n"
"uint16   u2Type\n"
"int8     u1Id\n"
"uint8    u1NeighborMask\n"
"int8     u1LeftLaneId\n"
"int8     u1RightLaneId\n"
;
  }

  static const char* value(const ::RosAdapter::lane_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::lane_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u8RoadId);
      stream.next(m.u4ObjectId);
      stream.next(m.u4Width);
      stream.next(m.u2Type);
      stream.next(m.u1Id);
      stream.next(m.u1NeighborMask);
      stream.next(m.u1LeftLaneId);
      stream.next(m.u1RightLaneId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lane_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::lane_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::lane_info_<ContainerAllocator>& v)
  {
    s << indent << "u8RoadId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.u8RoadId);
    s << indent << "u4ObjectId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4ObjectId);
    s << indent << "u4Width: ";
    Printer<float>::stream(s, indent + "  ", v.u4Width);
    s << indent << "u2Type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u2Type);
    s << indent << "u1Id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.u1Id);
    s << indent << "u1NeighborMask: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1NeighborMask);
    s << indent << "u1LeftLaneId: ";
    Printer<int8_t>::stream(s, indent + "  ", v.u1LeftLaneId);
    s << indent << "u1RightLaneId: ";
    Printer<int8_t>::stream(s, indent + "  ", v.u1RightLaneId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_LANE_INFO_H
