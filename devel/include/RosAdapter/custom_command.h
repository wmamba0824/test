// Generated by gencpp from file RosAdapter/custom_command.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_CUSTOM_COMMAND_H
#define ROSADAPTER_MESSAGE_CUSTOM_COMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct custom_command_
{
  typedef custom_command_<ContainerAllocator> Type;

  custom_command_()
    : au1Type()
    , au1Command()
    , u4ObjectId(0)  {
    }
  custom_command_(const ContainerAllocator& _alloc)
    : au1Type(_alloc)
    , au1Command(_alloc)
    , u4ObjectId(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _au1Type_type;
  _au1Type_type au1Type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _au1Command_type;
  _au1Command_type au1Command;

   typedef uint32_t _u4ObjectId_type;
  _u4ObjectId_type u4ObjectId;





  typedef boost::shared_ptr< ::RosAdapter::custom_command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::custom_command_<ContainerAllocator> const> ConstPtr;

}; // struct custom_command_

typedef ::RosAdapter::custom_command_<std::allocator<void> > custom_command;

typedef boost::shared_ptr< ::RosAdapter::custom_command > custom_commandPtr;
typedef boost::shared_ptr< ::RosAdapter::custom_command const> custom_commandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::custom_command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::custom_command_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::custom_command_<ContainerAllocator1> & lhs, const ::RosAdapter::custom_command_<ContainerAllocator2> & rhs)
{
  return lhs.au1Type == rhs.au1Type &&
    lhs.au1Command == rhs.au1Command &&
    lhs.u4ObjectId == rhs.u4ObjectId;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::custom_command_<ContainerAllocator1> & lhs, const ::RosAdapter::custom_command_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::custom_command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::custom_command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::custom_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::custom_command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::custom_command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::custom_command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::custom_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "90841668178727efd240bbb0c9edb09b";
  }

  static const char* value(const ::RosAdapter::custom_command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x90841668178727efULL;
  static const uint64_t static_value2 = 0xd240bbb0c9edb09bULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::custom_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/custom_command";
  }

  static const char* value(const ::RosAdapter::custom_command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::custom_command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------自定义指令 ------ */\n"
"\n"
"string   au1Type\n"
"string   au1Command\n"
"uint32   u4ObjectId\n"
;
  }

  static const char* value(const ::RosAdapter::custom_command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::custom_command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.au1Type);
      stream.next(m.au1Command);
      stream.next(m.u4ObjectId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct custom_command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::custom_command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::custom_command_<ContainerAllocator>& v)
  {
    s << indent << "au1Type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.au1Type);
    s << indent << "au1Command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.au1Command);
    s << indent << "u4ObjectId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4ObjectId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_CUSTOM_COMMAND_H
