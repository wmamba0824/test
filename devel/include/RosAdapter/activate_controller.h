// Generated by gencpp from file RosAdapter/activate_controller.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_ACTIVATE_CONTROLLER_H
#define ROSADAPTER_MESSAGE_ACTIVATE_CONTROLLER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct activate_controller_
{
  typedef activate_controller_<ContainerAllocator> Type;

  activate_controller_()
    : u4ObjectId(0)
    , u1Lateral(false)
    , u1Longitudinal(false)  {
    }
  activate_controller_(const ContainerAllocator& _alloc)
    : u4ObjectId(0)
    , u1Lateral(false)
    , u1Longitudinal(false)  {
  (void)_alloc;
    }



   typedef uint32_t _u4ObjectId_type;
  _u4ObjectId_type u4ObjectId;

   typedef uint8_t _u1Lateral_type;
  _u1Lateral_type u1Lateral;

   typedef uint8_t _u1Longitudinal_type;
  _u1Longitudinal_type u1Longitudinal;





  typedef boost::shared_ptr< ::RosAdapter::activate_controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::activate_controller_<ContainerAllocator> const> ConstPtr;

}; // struct activate_controller_

typedef ::RosAdapter::activate_controller_<std::allocator<void> > activate_controller;

typedef boost::shared_ptr< ::RosAdapter::activate_controller > activate_controllerPtr;
typedef boost::shared_ptr< ::RosAdapter::activate_controller const> activate_controllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::activate_controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::activate_controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::activate_controller_<ContainerAllocator1> & lhs, const ::RosAdapter::activate_controller_<ContainerAllocator2> & rhs)
{
  return lhs.u4ObjectId == rhs.u4ObjectId &&
    lhs.u1Lateral == rhs.u1Lateral &&
    lhs.u1Longitudinal == rhs.u1Longitudinal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::activate_controller_<ContainerAllocator1> & lhs, const ::RosAdapter::activate_controller_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::activate_controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::activate_controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::activate_controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::activate_controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::activate_controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::activate_controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::activate_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5767c52dad068fee51764b887eed08ec";
  }

  static const char* value(const ::RosAdapter::activate_controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5767c52dad068feeULL;
  static const uint64_t static_value2 = 0x51764b887eed08ecULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::activate_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/activate_controller";
  }

  static const char* value(const ::RosAdapter::activate_controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::activate_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------激活控制器 ------ */\n"
"\n"
"uint32          u4ObjectId\n"
"bool            u1Lateral\n"
"bool            u1Longitudinal\n"
;
  }

  static const char* value(const ::RosAdapter::activate_controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::activate_controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u4ObjectId);
      stream.next(m.u1Lateral);
      stream.next(m.u1Longitudinal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct activate_controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::activate_controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::activate_controller_<ContainerAllocator>& v)
  {
    s << indent << "u4ObjectId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4ObjectId);
    s << indent << "u1Lateral: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1Lateral);
    s << indent << "u1Longitudinal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1Longitudinal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_ACTIVATE_CONTROLLER_H
