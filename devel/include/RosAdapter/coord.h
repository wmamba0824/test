// Generated by gencpp from file RosAdapter/coord.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_COORD_H
#define ROSADAPTER_MESSAGE_COORD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct coord_
{
  typedef coord_<ContainerAllocator> Type;

  coord_()
    : u8X(0.0)
    , u8Y(0.0)
    , u8Z(0.0)
    , u4H(0.0)
    , u4P(0.0)
    , u4R(0.0)
    , u1Type(0)  {
    }
  coord_(const ContainerAllocator& _alloc)
    : u8X(0.0)
    , u8Y(0.0)
    , u8Z(0.0)
    , u4H(0.0)
    , u4P(0.0)
    , u4R(0.0)
    , u1Type(0)  {
  (void)_alloc;
    }



   typedef double _u8X_type;
  _u8X_type u8X;

   typedef double _u8Y_type;
  _u8Y_type u8Y;

   typedef double _u8Z_type;
  _u8Z_type u8Z;

   typedef float _u4H_type;
  _u4H_type u4H;

   typedef float _u4P_type;
  _u4P_type u4P;

   typedef float _u4R_type;
  _u4R_type u4R;

   typedef uint8_t _u1Type_type;
  _u1Type_type u1Type;





  typedef boost::shared_ptr< ::RosAdapter::coord_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::coord_<ContainerAllocator> const> ConstPtr;

}; // struct coord_

typedef ::RosAdapter::coord_<std::allocator<void> > coord;

typedef boost::shared_ptr< ::RosAdapter::coord > coordPtr;
typedef boost::shared_ptr< ::RosAdapter::coord const> coordConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::coord_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::coord_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::coord_<ContainerAllocator1> & lhs, const ::RosAdapter::coord_<ContainerAllocator2> & rhs)
{
  return lhs.u8X == rhs.u8X &&
    lhs.u8Y == rhs.u8Y &&
    lhs.u8Z == rhs.u8Z &&
    lhs.u4H == rhs.u4H &&
    lhs.u4P == rhs.u4P &&
    lhs.u4R == rhs.u4R &&
    lhs.u1Type == rhs.u1Type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::coord_<ContainerAllocator1> & lhs, const ::RosAdapter::coord_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::coord_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::coord_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::coord_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::coord_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::coord_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::coord_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::coord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b91c4545f116a70c5f09e1d7ccb453d9";
  }

  static const char* value(const ::RosAdapter::coord_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb91c4545f116a70cULL;
  static const uint64_t static_value2 = 0x5f09e1d7ccb453d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::coord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/coord";
  }

  static const char* value(const ::RosAdapter::coord_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::coord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------ 坐标 ------ */\n"
"float64   u8X\n"
"float64   u8Y\n"
"float64   u8Z\n"
"float32   u4H\n"
"float32   u4P\n"
"float32   u4R\n"
"uint8     u1Type\n"
;
  }

  static const char* value(const ::RosAdapter::coord_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::coord_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u8X);
      stream.next(m.u8Y);
      stream.next(m.u8Z);
      stream.next(m.u4H);
      stream.next(m.u4P);
      stream.next(m.u4R);
      stream.next(m.u1Type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct coord_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::coord_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::coord_<ContainerAllocator>& v)
  {
    s << indent << "u8X: ";
    Printer<double>::stream(s, indent + "  ", v.u8X);
    s << indent << "u8Y: ";
    Printer<double>::stream(s, indent + "  ", v.u8Y);
    s << indent << "u8Z: ";
    Printer<double>::stream(s, indent + "  ", v.u8Z);
    s << indent << "u4H: ";
    Printer<float>::stream(s, indent + "  ", v.u4H);
    s << indent << "u4P: ";
    Printer<float>::stream(s, indent + "  ", v.u4P);
    s << indent << "u4R: ";
    Printer<float>::stream(s, indent + "  ", v.u4R);
    s << indent << "u1Type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1Type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_COORD_H
