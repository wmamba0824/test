// Generated by gencpp from file RosAdapter/mil_object_state.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_MIL_OBJECT_STATE_H
#define ROSADAPTER_MESSAGE_MIL_OBJECT_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <RosAdapter/object_state.h>
#include <RosAdapter/mil_object_state_base.h>

namespace RosAdapter
{
template <class ContainerAllocator>
struct mil_object_state_
{
  typedef mil_object_state_<ContainerAllocator> Type;

  mil_object_state_()
    : sObjectState()
    , sMilBase()  {
    }
  mil_object_state_(const ContainerAllocator& _alloc)
    : sObjectState(_alloc)
    , sMilBase(_alloc)  {
  (void)_alloc;
    }



   typedef  ::RosAdapter::object_state_<ContainerAllocator>  _sObjectState_type;
  _sObjectState_type sObjectState;

   typedef  ::RosAdapter::mil_object_state_base_<ContainerAllocator>  _sMilBase_type;
  _sMilBase_type sMilBase;





  typedef boost::shared_ptr< ::RosAdapter::mil_object_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::mil_object_state_<ContainerAllocator> const> ConstPtr;

}; // struct mil_object_state_

typedef ::RosAdapter::mil_object_state_<std::allocator<void> > mil_object_state;

typedef boost::shared_ptr< ::RosAdapter::mil_object_state > mil_object_statePtr;
typedef boost::shared_ptr< ::RosAdapter::mil_object_state const> mil_object_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::mil_object_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::mil_object_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::mil_object_state_<ContainerAllocator1> & lhs, const ::RosAdapter::mil_object_state_<ContainerAllocator2> & rhs)
{
  return lhs.sObjectState == rhs.sObjectState &&
    lhs.sMilBase == rhs.sMilBase;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::mil_object_state_<ContainerAllocator1> & lhs, const ::RosAdapter::mil_object_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::mil_object_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::mil_object_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::mil_object_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::mil_object_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::mil_object_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::mil_object_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::mil_object_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5c77edb401c9c12e68a0c159480ce25";
  }

  static const char* value(const ::RosAdapter::mil_object_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5c77edb401c9c12ULL;
  static const uint64_t static_value2 = 0xe68a0c159480ce25ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::mil_object_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/mil_object_state";
  }

  static const char* value(const ::RosAdapter::mil_object_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::mil_object_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------ MIL测试环境车、行人、障碍物信息 ------ */\n"
"object_state           sObjectState\n"
"mil_object_state_base  sMilBase\n"
"================================================================================\n"
"MSG: RosAdapter/object_state\n"
"# /** ------ 对象信息 ------ */\n"
"coord           sSpeed\n"
"coord           sAccel\n"
"geometry        sGeo\n"
"coord           sPos\n"
"string          au1Name\n"
"string          au1ModelFileName\n"
"string          au1ModelName\n"
"float64[]       au8ParamScale\n"
"uint64          u8RoadId\n"
"float64         u8SpeedLimit\n"
"uint32          u4Id\n"
"float32         u4RoadS\n"
"float32         u4RoadT\n"
"float32         u4HdgRel\n"
"float32         u4LaneOffset\n"
"float32         u4TraveledDist\n"
"uint16          u2visMask\n"
"uint8           u1Type\n"
"int8            u1LaneId\n"
"uint8           u1Dir\n"
"bool            u1IsOnRoad\n"
"uint8           u1category\n"
"================================================================================\n"
"MSG: RosAdapter/coord\n"
"# /** ------ 坐标 ------ */\n"
"float64   u8X\n"
"float64   u8Y\n"
"float64   u8Z\n"
"float32   u4H\n"
"float32   u4P\n"
"float32   u4R\n"
"uint8     u1Type\n"
"================================================================================\n"
"MSG: RosAdapter/geometry\n"
"# /** ------ 几何信息 ------ */\n"
"float32 u4DimX\n"
"float32 u4DimY\n"
"float32 u4DimZ\n"
"float32 u4OffX\n"
"float32 u4OffY\n"
"float32 u4OffZ\n"
"================================================================================\n"
"MSG: RosAdapter/mil_object_state_base\n"
"#/** ------ MIL测试环境车、行人、障碍物信息描述包 ------ */\n"
"\n"
"uint32     u4LightMask\n"
"float32    u4DistanceX\n"
"float32    u4DistanceY\n"
"float32    u4VelocityX\n"
"float32    u4VelocityY\n"
"float32    u4AccelerationX\n"
"float32    u4AccelerationY\n"
"float32    u4YawRate\n"
"float32    u4Dist\n"
"float32    u4Angle\n"
"uint8      u1ObjClass\n"
"uint8      u1Flag_detected\n"
"uint8      u1Movable\n"
"uint8      u1Moving\n"
"uint8      u1Obj_Age\n"
;
  }

  static const char* value(const ::RosAdapter::mil_object_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::mil_object_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sObjectState);
      stream.next(m.sMilBase);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mil_object_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::mil_object_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::mil_object_state_<ContainerAllocator>& v)
  {
    s << indent << "sObjectState: ";
    s << std::endl;
    Printer< ::RosAdapter::object_state_<ContainerAllocator> >::stream(s, indent + "  ", v.sObjectState);
    s << indent << "sMilBase: ";
    s << std::endl;
    Printer< ::RosAdapter::mil_object_state_base_<ContainerAllocator> >::stream(s, indent + "  ", v.sMilBase);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_MIL_OBJECT_STATE_H
