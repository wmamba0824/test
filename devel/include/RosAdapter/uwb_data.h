// Generated by gencpp from file RosAdapter/uwb_data.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_UWB_DATA_H
#define ROSADAPTER_MESSAGE_UWB_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct uwb_data_
{
  typedef uwb_data_<ContainerAllocator> Type;

  uwb_data_()
    : msgcnt(0)
    , u8x(0.0)
    , u8y(0.0)
    , u8z(0.0)  {
    }
  uwb_data_(const ContainerAllocator& _alloc)
    : msgcnt(0)
    , u8x(0.0)
    , u8y(0.0)
    , u8z(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _msgcnt_type;
  _msgcnt_type msgcnt;

   typedef double _u8x_type;
  _u8x_type u8x;

   typedef double _u8y_type;
  _u8y_type u8y;

   typedef double _u8z_type;
  _u8z_type u8z;





  typedef boost::shared_ptr< ::RosAdapter::uwb_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::uwb_data_<ContainerAllocator> const> ConstPtr;

}; // struct uwb_data_

typedef ::RosAdapter::uwb_data_<std::allocator<void> > uwb_data;

typedef boost::shared_ptr< ::RosAdapter::uwb_data > uwb_dataPtr;
typedef boost::shared_ptr< ::RosAdapter::uwb_data const> uwb_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::uwb_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::uwb_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::uwb_data_<ContainerAllocator1> & lhs, const ::RosAdapter::uwb_data_<ContainerAllocator2> & rhs)
{
  return lhs.msgcnt == rhs.msgcnt &&
    lhs.u8x == rhs.u8x &&
    lhs.u8y == rhs.u8y &&
    lhs.u8z == rhs.u8z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::uwb_data_<ContainerAllocator1> & lhs, const ::RosAdapter::uwb_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::uwb_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::uwb_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::uwb_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::uwb_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::uwb_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::uwb_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::uwb_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a9d6b1915268c02dadd546cc26931a6";
  }

  static const char* value(const ::RosAdapter::uwb_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a9d6b1915268c02ULL;
  static const uint64_t static_value2 = 0xdadd546cc26931a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::uwb_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/uwb_data";
  }

  static const char* value(const ::RosAdapter::uwb_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::uwb_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8         msgcnt\n"
"float64       u8x\n"
"float64       u8y\n"
"float64       u8z\n"
;
  }

  static const char* value(const ::RosAdapter::uwb_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::uwb_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msgcnt);
      stream.next(m.u8x);
      stream.next(m.u8y);
      stream.next(m.u8z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct uwb_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::uwb_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::uwb_data_<ContainerAllocator>& v)
  {
    s << indent << "msgcnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msgcnt);
    s << indent << "u8x: ";
    Printer<double>::stream(s, indent + "  ", v.u8x);
    s << indent << "u8y: ";
    Printer<double>::stream(s, indent + "  ", v.u8y);
    s << indent << "u8z: ";
    Printer<double>::stream(s, indent + "  ", v.u8z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_UWB_DATA_H
