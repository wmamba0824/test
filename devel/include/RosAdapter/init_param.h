// Generated by gencpp from file RosAdapter/init_param.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_INIT_PARAM_H
#define ROSADAPTER_MESSAGE_INIT_PARAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct init_param_
{
  typedef init_param_<ContainerAllocator> Type;

  init_param_()
    : au1OpenScenario()
    , au1OpenDrive()
    , u8StartRoadId(0)
    , u8EndRoadId(0)
    , u4StartRoadS(0.0)
    , u4EndRoadS(0.0)
    , u4Speed(0.0)
    , u2ScenarioId(0)
    , u1StartLaneId(0)
    , u1EndLaneId(0)  {
    }
  init_param_(const ContainerAllocator& _alloc)
    : au1OpenScenario(_alloc)
    , au1OpenDrive(_alloc)
    , u8StartRoadId(0)
    , u8EndRoadId(0)
    , u4StartRoadS(0.0)
    , u4EndRoadS(0.0)
    , u4Speed(0.0)
    , u2ScenarioId(0)
    , u1StartLaneId(0)
    , u1EndLaneId(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _au1OpenScenario_type;
  _au1OpenScenario_type au1OpenScenario;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _au1OpenDrive_type;
  _au1OpenDrive_type au1OpenDrive;

   typedef uint64_t _u8StartRoadId_type;
  _u8StartRoadId_type u8StartRoadId;

   typedef uint64_t _u8EndRoadId_type;
  _u8EndRoadId_type u8EndRoadId;

   typedef float _u4StartRoadS_type;
  _u4StartRoadS_type u4StartRoadS;

   typedef float _u4EndRoadS_type;
  _u4EndRoadS_type u4EndRoadS;

   typedef float _u4Speed_type;
  _u4Speed_type u4Speed;

   typedef uint16_t _u2ScenarioId_type;
  _u2ScenarioId_type u2ScenarioId;

   typedef int8_t _u1StartLaneId_type;
  _u1StartLaneId_type u1StartLaneId;

   typedef int8_t _u1EndLaneId_type;
  _u1EndLaneId_type u1EndLaneId;





  typedef boost::shared_ptr< ::RosAdapter::init_param_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::init_param_<ContainerAllocator> const> ConstPtr;

}; // struct init_param_

typedef ::RosAdapter::init_param_<std::allocator<void> > init_param;

typedef boost::shared_ptr< ::RosAdapter::init_param > init_paramPtr;
typedef boost::shared_ptr< ::RosAdapter::init_param const> init_paramConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::init_param_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::init_param_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::init_param_<ContainerAllocator1> & lhs, const ::RosAdapter::init_param_<ContainerAllocator2> & rhs)
{
  return lhs.au1OpenScenario == rhs.au1OpenScenario &&
    lhs.au1OpenDrive == rhs.au1OpenDrive &&
    lhs.u8StartRoadId == rhs.u8StartRoadId &&
    lhs.u8EndRoadId == rhs.u8EndRoadId &&
    lhs.u4StartRoadS == rhs.u4StartRoadS &&
    lhs.u4EndRoadS == rhs.u4EndRoadS &&
    lhs.u4Speed == rhs.u4Speed &&
    lhs.u2ScenarioId == rhs.u2ScenarioId &&
    lhs.u1StartLaneId == rhs.u1StartLaneId &&
    lhs.u1EndLaneId == rhs.u1EndLaneId;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::init_param_<ContainerAllocator1> & lhs, const ::RosAdapter::init_param_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::init_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::init_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::init_param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::init_param_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::init_param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::init_param_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::init_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1c91c53dd3d6cc4f662b216093d05ec";
  }

  static const char* value(const ::RosAdapter::init_param_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1c91c53dd3d6cc4ULL;
  static const uint64_t static_value2 = 0xf662b216093d05ecULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::init_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/init_param";
  }

  static const char* value(const ::RosAdapter::init_param_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::init_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------ 初始化参数 ------ */\n"
"\n"
"string             au1OpenScenario\n"
"string             au1OpenDrive\n"
"uint64             u8StartRoadId\n"
"uint64             u8EndRoadId\n"
"float32            u4StartRoadS\n"
"float32            u4EndRoadS\n"
"float32            u4Speed\n"
"uint16             u2ScenarioId\n"
"int8               u1StartLaneId\n"
"int8               u1EndLaneId\n"
;
  }

  static const char* value(const ::RosAdapter::init_param_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::init_param_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.au1OpenScenario);
      stream.next(m.au1OpenDrive);
      stream.next(m.u8StartRoadId);
      stream.next(m.u8EndRoadId);
      stream.next(m.u4StartRoadS);
      stream.next(m.u4EndRoadS);
      stream.next(m.u4Speed);
      stream.next(m.u2ScenarioId);
      stream.next(m.u1StartLaneId);
      stream.next(m.u1EndLaneId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct init_param_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::init_param_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::init_param_<ContainerAllocator>& v)
  {
    s << indent << "au1OpenScenario: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.au1OpenScenario);
    s << indent << "au1OpenDrive: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.au1OpenDrive);
    s << indent << "u8StartRoadId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.u8StartRoadId);
    s << indent << "u8EndRoadId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.u8EndRoadId);
    s << indent << "u4StartRoadS: ";
    Printer<float>::stream(s, indent + "  ", v.u4StartRoadS);
    s << indent << "u4EndRoadS: ";
    Printer<float>::stream(s, indent + "  ", v.u4EndRoadS);
    s << indent << "u4Speed: ";
    Printer<float>::stream(s, indent + "  ", v.u4Speed);
    s << indent << "u2ScenarioId: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u2ScenarioId);
    s << indent << "u1StartLaneId: ";
    Printer<int8_t>::stream(s, indent + "  ", v.u1StartLaneId);
    s << indent << "u1EndLaneId: ";
    Printer<int8_t>::stream(s, indent + "  ", v.u1EndLaneId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_INIT_PARAM_H
