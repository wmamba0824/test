// Generated by gencpp from file RosAdapter/parkingSpace.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_PARKINGSPACE_H
#define ROSADAPTER_MESSAGE_PARKINGSPACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <RosAdapter/geometry.h>
#include <RosAdapter/coord.h>

namespace RosAdapter
{
template <class ContainerAllocator>
struct parkingSpace_
{
  typedef parkingSpace_<ContainerAllocator> Type;

  parkingSpace_()
    : sGeo()
    , sPos()
    , u4RoadS(0.0)
    , u4RoadT(0.0)
    , u8SlotId(0)  {
    }
  parkingSpace_(const ContainerAllocator& _alloc)
    : sGeo(_alloc)
    , sPos(_alloc)
    , u4RoadS(0.0)
    , u4RoadT(0.0)
    , u8SlotId(0)  {
  (void)_alloc;
    }



   typedef  ::RosAdapter::geometry_<ContainerAllocator>  _sGeo_type;
  _sGeo_type sGeo;

   typedef  ::RosAdapter::coord_<ContainerAllocator>  _sPos_type;
  _sPos_type sPos;

   typedef float _u4RoadS_type;
  _u4RoadS_type u4RoadS;

   typedef float _u4RoadT_type;
  _u4RoadT_type u4RoadT;

   typedef uint64_t _u8SlotId_type;
  _u8SlotId_type u8SlotId;





  typedef boost::shared_ptr< ::RosAdapter::parkingSpace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::parkingSpace_<ContainerAllocator> const> ConstPtr;

}; // struct parkingSpace_

typedef ::RosAdapter::parkingSpace_<std::allocator<void> > parkingSpace;

typedef boost::shared_ptr< ::RosAdapter::parkingSpace > parkingSpacePtr;
typedef boost::shared_ptr< ::RosAdapter::parkingSpace const> parkingSpaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::parkingSpace_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::parkingSpace_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::parkingSpace_<ContainerAllocator1> & lhs, const ::RosAdapter::parkingSpace_<ContainerAllocator2> & rhs)
{
  return lhs.sGeo == rhs.sGeo &&
    lhs.sPos == rhs.sPos &&
    lhs.u4RoadS == rhs.u4RoadS &&
    lhs.u4RoadT == rhs.u4RoadT &&
    lhs.u8SlotId == rhs.u8SlotId;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::parkingSpace_<ContainerAllocator1> & lhs, const ::RosAdapter::parkingSpace_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::parkingSpace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::parkingSpace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::parkingSpace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::parkingSpace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::parkingSpace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::parkingSpace_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::parkingSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e53c23c885c726b62a62404fba515f0";
  }

  static const char* value(const ::RosAdapter::parkingSpace_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e53c23c885c726bULL;
  static const uint64_t static_value2 = 0x62a62404fba515f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::parkingSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/parkingSpace";
  }

  static const char* value(const ::RosAdapter::parkingSpace_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::parkingSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#/** ------ 停车位信息 ------ */\n"
"geometry  sGeo\n"
"coord     sPos\n"
"float32   u4RoadS\n"
"float32   u4RoadT\n"
"uint64    u8SlotId\n"
"\n"
"================================================================================\n"
"MSG: RosAdapter/geometry\n"
"# /** ------ 几何信息 ------ */\n"
"float32 u4DimX\n"
"float32 u4DimY\n"
"float32 u4DimZ\n"
"float32 u4OffX\n"
"float32 u4OffY\n"
"float32 u4OffZ\n"
"================================================================================\n"
"MSG: RosAdapter/coord\n"
"# /** ------ 坐标 ------ */\n"
"float64   u8X\n"
"float64   u8Y\n"
"float64   u8Z\n"
"float32   u4H\n"
"float32   u4P\n"
"float32   u4R\n"
"uint8     u1Type\n"
;
  }

  static const char* value(const ::RosAdapter::parkingSpace_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::parkingSpace_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sGeo);
      stream.next(m.sPos);
      stream.next(m.u4RoadS);
      stream.next(m.u4RoadT);
      stream.next(m.u8SlotId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct parkingSpace_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::parkingSpace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::parkingSpace_<ContainerAllocator>& v)
  {
    s << indent << "sGeo: ";
    s << std::endl;
    Printer< ::RosAdapter::geometry_<ContainerAllocator> >::stream(s, indent + "  ", v.sGeo);
    s << indent << "sPos: ";
    s << std::endl;
    Printer< ::RosAdapter::coord_<ContainerAllocator> >::stream(s, indent + "  ", v.sPos);
    s << indent << "u4RoadS: ";
    Printer<float>::stream(s, indent + "  ", v.u4RoadS);
    s << indent << "u4RoadT: ";
    Printer<float>::stream(s, indent + "  ", v.u4RoadT);
    s << indent << "u8SlotId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.u8SlotId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_PARKINGSPACE_H
