// Generated by gencpp from file RosAdapter/sensor_detection_info.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_SENSOR_DETECTION_INFO_H
#define ROSADAPTER_MESSAGE_SENSOR_DETECTION_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <RosAdapter/object_uion.h>

namespace RosAdapter
{
template <class ContainerAllocator>
struct sensor_detection_info_
{
  typedef sensor_detection_info_<ContainerAllocator> Type;

  sensor_detection_info_()
    : u4Id(0)
    , u4SensorId(0)
    , u2Flags(0)
    , u1Type(0)
    , u1Occlusion(0)
    , u1DeltaLanePos(0)
    , u1ValidFlag(0)
    , u8ExistProb(0.0)
    , u8TypeIdProb(0.0)
    , sExtraInfo()  {
    }
  sensor_detection_info_(const ContainerAllocator& _alloc)
    : u4Id(0)
    , u4SensorId(0)
    , u2Flags(0)
    , u1Type(0)
    , u1Occlusion(0)
    , u1DeltaLanePos(0)
    , u1ValidFlag(0)
    , u8ExistProb(0.0)
    , u8TypeIdProb(0.0)
    , sExtraInfo(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _u4Id_type;
  _u4Id_type u4Id;

   typedef uint32_t _u4SensorId_type;
  _u4SensorId_type u4SensorId;

   typedef uint16_t _u2Flags_type;
  _u2Flags_type u2Flags;

   typedef uint8_t _u1Type_type;
  _u1Type_type u1Type;

   typedef int8_t _u1Occlusion_type;
  _u1Occlusion_type u1Occlusion;

   typedef int8_t _u1DeltaLanePos_type;
  _u1DeltaLanePos_type u1DeltaLanePos;

   typedef uint8_t _u1ValidFlag_type;
  _u1ValidFlag_type u1ValidFlag;

   typedef double _u8ExistProb_type;
  _u8ExistProb_type u8ExistProb;

   typedef double _u8TypeIdProb_type;
  _u8TypeIdProb_type u8TypeIdProb;

   typedef  ::RosAdapter::object_uion_<ContainerAllocator>  _sExtraInfo_type;
  _sExtraInfo_type sExtraInfo;





  typedef boost::shared_ptr< ::RosAdapter::sensor_detection_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::sensor_detection_info_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_detection_info_

typedef ::RosAdapter::sensor_detection_info_<std::allocator<void> > sensor_detection_info;

typedef boost::shared_ptr< ::RosAdapter::sensor_detection_info > sensor_detection_infoPtr;
typedef boost::shared_ptr< ::RosAdapter::sensor_detection_info const> sensor_detection_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::sensor_detection_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::sensor_detection_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::sensor_detection_info_<ContainerAllocator1> & lhs, const ::RosAdapter::sensor_detection_info_<ContainerAllocator2> & rhs)
{
  return lhs.u4Id == rhs.u4Id &&
    lhs.u4SensorId == rhs.u4SensorId &&
    lhs.u2Flags == rhs.u2Flags &&
    lhs.u1Type == rhs.u1Type &&
    lhs.u1Occlusion == rhs.u1Occlusion &&
    lhs.u1DeltaLanePos == rhs.u1DeltaLanePos &&
    lhs.u1ValidFlag == rhs.u1ValidFlag &&
    lhs.u8ExistProb == rhs.u8ExistProb &&
    lhs.u8TypeIdProb == rhs.u8TypeIdProb &&
    lhs.sExtraInfo == rhs.sExtraInfo;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::sensor_detection_info_<ContainerAllocator1> & lhs, const ::RosAdapter::sensor_detection_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::sensor_detection_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::sensor_detection_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::sensor_detection_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::sensor_detection_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::sensor_detection_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::sensor_detection_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::sensor_detection_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c1cb322c1ecab3b195230dfd2011618";
  }

  static const char* value(const ::RosAdapter::sensor_detection_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c1cb322c1ecab3bULL;
  static const uint64_t static_value2 = 0x195230dfd2011618ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::sensor_detection_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/sensor_detection_info";
  }

  static const char* value(const ::RosAdapter::sensor_detection_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::sensor_detection_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 传感器监测物体所有信息\n"
"\n"
"uint32            u4Id\n"
"uint32            u4SensorId\n"
"uint16            u2Flags\n"
"uint8             u1Type\n"
"int8              u1Occlusion\n"
"int8              u1DeltaLanePos\n"
"uint8             u1ValidFlag\n"
"float64           u8ExistProb\n"
"float64           u8TypeIdProb\n"
"object_uion       sExtraInfo\n"
"================================================================================\n"
"MSG: RosAdapter/object_uion\n"
"dynamic_object sDynamicObj\n"
"mark_object    sMarkObj\n"
"sign_object    sSignObj \n"
"================================================================================\n"
"MSG: RosAdapter/dynamic_object\n"
"# /** ------ 传感器探测到的对象信息 ------ */\n"
"\n"
"float64    u8Dist\n"
"float64    u8NearestDist\n"
"float64    u8RelativeVelx\n"
"float64    u8RelativeVely\n"
"float64    u8RelativeAccx\n"
"float64    u8RelativeAccy\n"
"float64    u8HeadingAngle\n"
"coord      sSensorPos\n"
"coord      sNearestSensorPos\n"
"coord      sSenNearestPosXL\n"
"coord      sSenNearestPosXR\n"
"coord      sSenNearestPosYL\n"
"coord      sSenNearestPosYR\n"
"point3d[]  sBoundingBox\n"
"uint8      u1MovingSt\n"
"================================================================================\n"
"MSG: RosAdapter/coord\n"
"# /** ------ 坐标 ------ */\n"
"float64   u8X\n"
"float64   u8Y\n"
"float64   u8Z\n"
"float32   u4H\n"
"float32   u4P\n"
"float32   u4R\n"
"uint8     u1Type\n"
"================================================================================\n"
"MSG: RosAdapter/point3d\n"
"float64      u8x\n"
"float64      u8y\n"
"float64      u8z\n"
"================================================================================\n"
"MSG: RosAdapter/mark_object\n"
"# 车道线\n"
"\n"
"float64[]	 au8RoadMarkCoeffL\n"
"float64[]	 au8RoadMarkCoeffR\n"
"================================================================================\n"
"MSG: RosAdapter/sign_object\n"
"# 交通标志\n"
"\n"
"float64   u8Dist\n"
"float64   u8NearestDist\n"
"float64   u8TrafficSignDistX\n"
"float64   u8TrafficSignDistY\n"
"coord     sSensorPos\n"
"coord     sNearestSensorPos\n"
"uint8     u1TrafficSignType\n"
;
  }

  static const char* value(const ::RosAdapter::sensor_detection_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::sensor_detection_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u4Id);
      stream.next(m.u4SensorId);
      stream.next(m.u2Flags);
      stream.next(m.u1Type);
      stream.next(m.u1Occlusion);
      stream.next(m.u1DeltaLanePos);
      stream.next(m.u1ValidFlag);
      stream.next(m.u8ExistProb);
      stream.next(m.u8TypeIdProb);
      stream.next(m.sExtraInfo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_detection_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::sensor_detection_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::sensor_detection_info_<ContainerAllocator>& v)
  {
    s << indent << "u4Id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4Id);
    s << indent << "u4SensorId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4SensorId);
    s << indent << "u2Flags: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u2Flags);
    s << indent << "u1Type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1Type);
    s << indent << "u1Occlusion: ";
    Printer<int8_t>::stream(s, indent + "  ", v.u1Occlusion);
    s << indent << "u1DeltaLanePos: ";
    Printer<int8_t>::stream(s, indent + "  ", v.u1DeltaLanePos);
    s << indent << "u1ValidFlag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1ValidFlag);
    s << indent << "u8ExistProb: ";
    Printer<double>::stream(s, indent + "  ", v.u8ExistProb);
    s << indent << "u8TypeIdProb: ";
    Printer<double>::stream(s, indent + "  ", v.u8TypeIdProb);
    s << indent << "sExtraInfo: ";
    s << std::endl;
    Printer< ::RosAdapter::object_uion_<ContainerAllocator> >::stream(s, indent + "  ", v.sExtraInfo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_SENSOR_DETECTION_INFO_H
