// Generated by gencpp from file RosAdapter/assign_controller_property.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_ASSIGN_CONTROLLER_PROPERTY_H
#define ROSADAPTER_MESSAGE_ASSIGN_CONTROLLER_PROPERTY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct assign_controller_property_
{
  typedef assign_controller_property_<ContainerAllocator> Type;

  assign_controller_property_()
    : au1Name()
    , au1Value()  {
    }
  assign_controller_property_(const ContainerAllocator& _alloc)
    : au1Name(_alloc)
    , au1Value(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _au1Name_type;
  _au1Name_type au1Name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _au1Value_type;
  _au1Value_type au1Value;





  typedef boost::shared_ptr< ::RosAdapter::assign_controller_property_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::assign_controller_property_<ContainerAllocator> const> ConstPtr;

}; // struct assign_controller_property_

typedef ::RosAdapter::assign_controller_property_<std::allocator<void> > assign_controller_property;

typedef boost::shared_ptr< ::RosAdapter::assign_controller_property > assign_controller_propertyPtr;
typedef boost::shared_ptr< ::RosAdapter::assign_controller_property const> assign_controller_propertyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::assign_controller_property_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::assign_controller_property_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::assign_controller_property_<ContainerAllocator1> & lhs, const ::RosAdapter::assign_controller_property_<ContainerAllocator2> & rhs)
{
  return lhs.au1Name == rhs.au1Name &&
    lhs.au1Value == rhs.au1Value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::assign_controller_property_<ContainerAllocator1> & lhs, const ::RosAdapter::assign_controller_property_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::assign_controller_property_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::assign_controller_property_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::assign_controller_property_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::assign_controller_property_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::assign_controller_property_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::assign_controller_property_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::assign_controller_property_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8c8abeff0815c54344be4ebcd153b4cb";
  }

  static const char* value(const ::RosAdapter::assign_controller_property_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8c8abeff0815c543ULL;
  static const uint64_t static_value2 = 0x44be4ebcd153b4cbULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::assign_controller_property_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/assign_controller_property";
  }

  static const char* value(const ::RosAdapter::assign_controller_property_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::assign_controller_property_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------分配控制器的属性信息 ------ */\n"
"\n"
"string   au1Name\n"
"string   au1Value\n"
;
  }

  static const char* value(const ::RosAdapter::assign_controller_property_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::assign_controller_property_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.au1Name);
      stream.next(m.au1Value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct assign_controller_property_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::assign_controller_property_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::assign_controller_property_<ContainerAllocator>& v)
  {
    s << indent << "au1Name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.au1Name);
    s << indent << "au1Value: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.au1Value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_ASSIGN_CONTROLLER_PROPERTY_H
