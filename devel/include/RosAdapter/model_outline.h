// Generated by gencpp from file RosAdapter/model_outline.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_MODEL_OUTLINE_H
#define ROSADAPTER_MESSAGE_MODEL_OUTLINE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <RosAdapter/double_array.h>

namespace RosAdapter
{
template <class ContainerAllocator>
struct model_outline_
{
  typedef model_outline_<ContainerAllocator> Type;

  model_outline_()
    : au1ModelName()
    , au8OutlinePoints()  {
    }
  model_outline_(const ContainerAllocator& _alloc)
    : au1ModelName(_alloc)
    , au8OutlinePoints(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _au1ModelName_type;
  _au1ModelName_type au1ModelName;

   typedef std::vector< ::RosAdapter::double_array_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::double_array_<ContainerAllocator> >> _au8OutlinePoints_type;
  _au8OutlinePoints_type au8OutlinePoints;





  typedef boost::shared_ptr< ::RosAdapter::model_outline_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::model_outline_<ContainerAllocator> const> ConstPtr;

}; // struct model_outline_

typedef ::RosAdapter::model_outline_<std::allocator<void> > model_outline;

typedef boost::shared_ptr< ::RosAdapter::model_outline > model_outlinePtr;
typedef boost::shared_ptr< ::RosAdapter::model_outline const> model_outlineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::model_outline_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::model_outline_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::model_outline_<ContainerAllocator1> & lhs, const ::RosAdapter::model_outline_<ContainerAllocator2> & rhs)
{
  return lhs.au1ModelName == rhs.au1ModelName &&
    lhs.au8OutlinePoints == rhs.au8OutlinePoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::model_outline_<ContainerAllocator1> & lhs, const ::RosAdapter::model_outline_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::model_outline_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::model_outline_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::model_outline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::model_outline_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::model_outline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::model_outline_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::model_outline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21a3ac0ff6ce066332bb8e9a1448b5b3";
  }

  static const char* value(const ::RosAdapter::model_outline_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21a3ac0ff6ce0663ULL;
  static const uint64_t static_value2 = 0x32bb8e9a1448b5b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::model_outline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/model_outline";
  }

  static const char* value(const ::RosAdapter::model_outline_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::model_outline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string                au1ModelName\n"
"double_array[]        au8OutlinePoints    \n"
"================================================================================\n"
"MSG: RosAdapter/double_array\n"
"float64[]  data\n"
;
  }

  static const char* value(const ::RosAdapter::model_outline_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::model_outline_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.au1ModelName);
      stream.next(m.au8OutlinePoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct model_outline_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::model_outline_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::model_outline_<ContainerAllocator>& v)
  {
    s << indent << "au1ModelName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.au1ModelName);
    s << indent << "au8OutlinePoints[]" << std::endl;
    for (size_t i = 0; i < v.au8OutlinePoints.size(); ++i)
    {
      s << indent << "  au8OutlinePoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::double_array_<ContainerAllocator> >::stream(s, indent + "    ", v.au8OutlinePoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_MODEL_OUTLINE_H
