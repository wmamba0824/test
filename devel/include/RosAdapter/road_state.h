// Generated by gencpp from file RosAdapter/road_state.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_ROAD_STATE_H
#define ROSADAPTER_MESSAGE_ROAD_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct road_state_
{
  typedef road_state_<ContainerAllocator> Type;

  road_state_()
    : u8RoadId(0)
    , u4ObjectId(0)
    , u4DefaultSpeed(0.0)
    , u4WaterLevel(0.0)
    , u4DistToJunc(0.0)  {
    }
  road_state_(const ContainerAllocator& _alloc)
    : u8RoadId(0)
    , u4ObjectId(0)
    , u4DefaultSpeed(0.0)
    , u4WaterLevel(0.0)
    , u4DistToJunc(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _u8RoadId_type;
  _u8RoadId_type u8RoadId;

   typedef uint32_t _u4ObjectId_type;
  _u4ObjectId_type u4ObjectId;

   typedef float _u4DefaultSpeed_type;
  _u4DefaultSpeed_type u4DefaultSpeed;

   typedef float _u4WaterLevel_type;
  _u4WaterLevel_type u4WaterLevel;

   typedef float _u4DistToJunc_type;
  _u4DistToJunc_type u4DistToJunc;





  typedef boost::shared_ptr< ::RosAdapter::road_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::road_state_<ContainerAllocator> const> ConstPtr;

}; // struct road_state_

typedef ::RosAdapter::road_state_<std::allocator<void> > road_state;

typedef boost::shared_ptr< ::RosAdapter::road_state > road_statePtr;
typedef boost::shared_ptr< ::RosAdapter::road_state const> road_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::road_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::road_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::road_state_<ContainerAllocator1> & lhs, const ::RosAdapter::road_state_<ContainerAllocator2> & rhs)
{
  return lhs.u8RoadId == rhs.u8RoadId &&
    lhs.u4ObjectId == rhs.u4ObjectId &&
    lhs.u4DefaultSpeed == rhs.u4DefaultSpeed &&
    lhs.u4WaterLevel == rhs.u4WaterLevel &&
    lhs.u4DistToJunc == rhs.u4DistToJunc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::road_state_<ContainerAllocator1> & lhs, const ::RosAdapter::road_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::road_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::road_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::road_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::road_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::road_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::road_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::road_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b99771b3b0714bf50c28d1e2e932612";
  }

  static const char* value(const ::RosAdapter::road_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b99771b3b0714bfULL;
  static const uint64_t static_value2 = 0x50c28d1e2e932612ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::road_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/road_state";
  }

  static const char* value(const ::RosAdapter::road_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::road_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#/** ------ 车辆对应的道路状态 ------ */\n"
"uint64  u8RoadId\n"
"uint32  u4ObjectId\n"
"float32 u4DefaultSpeed\n"
"float32 u4WaterLevel\n"
"float32 u4DistToJunc\n"
;
  }

  static const char* value(const ::RosAdapter::road_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::road_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u8RoadId);
      stream.next(m.u4ObjectId);
      stream.next(m.u4DefaultSpeed);
      stream.next(m.u4WaterLevel);
      stream.next(m.u4DistToJunc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct road_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::road_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::road_state_<ContainerAllocator>& v)
  {
    s << indent << "u8RoadId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.u8RoadId);
    s << indent << "u4ObjectId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4ObjectId);
    s << indent << "u4DefaultSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.u4DefaultSpeed);
    s << indent << "u4WaterLevel: ";
    Printer<float>::stream(s, indent + "  ", v.u4WaterLevel);
    s << indent << "u4DistToJunc: ";
    Printer<float>::stream(s, indent + "  ", v.u4DistToJunc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_ROAD_STATE_H
