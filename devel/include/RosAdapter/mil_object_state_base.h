// Generated by gencpp from file RosAdapter/mil_object_state_base.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_MIL_OBJECT_STATE_BASE_H
#define ROSADAPTER_MESSAGE_MIL_OBJECT_STATE_BASE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct mil_object_state_base_
{
  typedef mil_object_state_base_<ContainerAllocator> Type;

  mil_object_state_base_()
    : u4LightMask(0)
    , u4DistanceX(0.0)
    , u4DistanceY(0.0)
    , u4VelocityX(0.0)
    , u4VelocityY(0.0)
    , u4AccelerationX(0.0)
    , u4AccelerationY(0.0)
    , u4YawRate(0.0)
    , u4Dist(0.0)
    , u4Angle(0.0)
    , u1ObjClass(0)
    , u1Flag_detected(0)
    , u1Movable(0)
    , u1Moving(0)
    , u1Obj_Age(0)  {
    }
  mil_object_state_base_(const ContainerAllocator& _alloc)
    : u4LightMask(0)
    , u4DistanceX(0.0)
    , u4DistanceY(0.0)
    , u4VelocityX(0.0)
    , u4VelocityY(0.0)
    , u4AccelerationX(0.0)
    , u4AccelerationY(0.0)
    , u4YawRate(0.0)
    , u4Dist(0.0)
    , u4Angle(0.0)
    , u1ObjClass(0)
    , u1Flag_detected(0)
    , u1Movable(0)
    , u1Moving(0)
    , u1Obj_Age(0)  {
  (void)_alloc;
    }



   typedef uint32_t _u4LightMask_type;
  _u4LightMask_type u4LightMask;

   typedef float _u4DistanceX_type;
  _u4DistanceX_type u4DistanceX;

   typedef float _u4DistanceY_type;
  _u4DistanceY_type u4DistanceY;

   typedef float _u4VelocityX_type;
  _u4VelocityX_type u4VelocityX;

   typedef float _u4VelocityY_type;
  _u4VelocityY_type u4VelocityY;

   typedef float _u4AccelerationX_type;
  _u4AccelerationX_type u4AccelerationX;

   typedef float _u4AccelerationY_type;
  _u4AccelerationY_type u4AccelerationY;

   typedef float _u4YawRate_type;
  _u4YawRate_type u4YawRate;

   typedef float _u4Dist_type;
  _u4Dist_type u4Dist;

   typedef float _u4Angle_type;
  _u4Angle_type u4Angle;

   typedef uint8_t _u1ObjClass_type;
  _u1ObjClass_type u1ObjClass;

   typedef uint8_t _u1Flag_detected_type;
  _u1Flag_detected_type u1Flag_detected;

   typedef uint8_t _u1Movable_type;
  _u1Movable_type u1Movable;

   typedef uint8_t _u1Moving_type;
  _u1Moving_type u1Moving;

   typedef uint8_t _u1Obj_Age_type;
  _u1Obj_Age_type u1Obj_Age;





  typedef boost::shared_ptr< ::RosAdapter::mil_object_state_base_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::mil_object_state_base_<ContainerAllocator> const> ConstPtr;

}; // struct mil_object_state_base_

typedef ::RosAdapter::mil_object_state_base_<std::allocator<void> > mil_object_state_base;

typedef boost::shared_ptr< ::RosAdapter::mil_object_state_base > mil_object_state_basePtr;
typedef boost::shared_ptr< ::RosAdapter::mil_object_state_base const> mil_object_state_baseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::mil_object_state_base_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::mil_object_state_base_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::mil_object_state_base_<ContainerAllocator1> & lhs, const ::RosAdapter::mil_object_state_base_<ContainerAllocator2> & rhs)
{
  return lhs.u4LightMask == rhs.u4LightMask &&
    lhs.u4DistanceX == rhs.u4DistanceX &&
    lhs.u4DistanceY == rhs.u4DistanceY &&
    lhs.u4VelocityX == rhs.u4VelocityX &&
    lhs.u4VelocityY == rhs.u4VelocityY &&
    lhs.u4AccelerationX == rhs.u4AccelerationX &&
    lhs.u4AccelerationY == rhs.u4AccelerationY &&
    lhs.u4YawRate == rhs.u4YawRate &&
    lhs.u4Dist == rhs.u4Dist &&
    lhs.u4Angle == rhs.u4Angle &&
    lhs.u1ObjClass == rhs.u1ObjClass &&
    lhs.u1Flag_detected == rhs.u1Flag_detected &&
    lhs.u1Movable == rhs.u1Movable &&
    lhs.u1Moving == rhs.u1Moving &&
    lhs.u1Obj_Age == rhs.u1Obj_Age;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::mil_object_state_base_<ContainerAllocator1> & lhs, const ::RosAdapter::mil_object_state_base_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::mil_object_state_base_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::mil_object_state_base_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::mil_object_state_base_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::mil_object_state_base_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::mil_object_state_base_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::mil_object_state_base_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::mil_object_state_base_<ContainerAllocator> >
{
  static const char* value()
  {
    return "460517ddfac2850057332c48eb20e133";
  }

  static const char* value(const ::RosAdapter::mil_object_state_base_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x460517ddfac28500ULL;
  static const uint64_t static_value2 = 0x57332c48eb20e133ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::mil_object_state_base_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/mil_object_state_base";
  }

  static const char* value(const ::RosAdapter::mil_object_state_base_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::mil_object_state_base_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#/** ------ MIL测试环境车、行人、障碍物信息描述包 ------ */\n"
"\n"
"uint32     u4LightMask\n"
"float32    u4DistanceX\n"
"float32    u4DistanceY\n"
"float32    u4VelocityX\n"
"float32    u4VelocityY\n"
"float32    u4AccelerationX\n"
"float32    u4AccelerationY\n"
"float32    u4YawRate\n"
"float32    u4Dist\n"
"float32    u4Angle\n"
"uint8      u1ObjClass\n"
"uint8      u1Flag_detected\n"
"uint8      u1Movable\n"
"uint8      u1Moving\n"
"uint8      u1Obj_Age\n"
;
  }

  static const char* value(const ::RosAdapter::mil_object_state_base_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::mil_object_state_base_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u4LightMask);
      stream.next(m.u4DistanceX);
      stream.next(m.u4DistanceY);
      stream.next(m.u4VelocityX);
      stream.next(m.u4VelocityY);
      stream.next(m.u4AccelerationX);
      stream.next(m.u4AccelerationY);
      stream.next(m.u4YawRate);
      stream.next(m.u4Dist);
      stream.next(m.u4Angle);
      stream.next(m.u1ObjClass);
      stream.next(m.u1Flag_detected);
      stream.next(m.u1Movable);
      stream.next(m.u1Moving);
      stream.next(m.u1Obj_Age);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mil_object_state_base_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::mil_object_state_base_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::mil_object_state_base_<ContainerAllocator>& v)
  {
    s << indent << "u4LightMask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4LightMask);
    s << indent << "u4DistanceX: ";
    Printer<float>::stream(s, indent + "  ", v.u4DistanceX);
    s << indent << "u4DistanceY: ";
    Printer<float>::stream(s, indent + "  ", v.u4DistanceY);
    s << indent << "u4VelocityX: ";
    Printer<float>::stream(s, indent + "  ", v.u4VelocityX);
    s << indent << "u4VelocityY: ";
    Printer<float>::stream(s, indent + "  ", v.u4VelocityY);
    s << indent << "u4AccelerationX: ";
    Printer<float>::stream(s, indent + "  ", v.u4AccelerationX);
    s << indent << "u4AccelerationY: ";
    Printer<float>::stream(s, indent + "  ", v.u4AccelerationY);
    s << indent << "u4YawRate: ";
    Printer<float>::stream(s, indent + "  ", v.u4YawRate);
    s << indent << "u4Dist: ";
    Printer<float>::stream(s, indent + "  ", v.u4Dist);
    s << indent << "u4Angle: ";
    Printer<float>::stream(s, indent + "  ", v.u4Angle);
    s << indent << "u1ObjClass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1ObjClass);
    s << indent << "u1Flag_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1Flag_detected);
    s << indent << "u1Movable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1Movable);
    s << indent << "u1Moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1Moving);
    s << indent << "u1Obj_Age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1Obj_Age);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_MIL_OBJECT_STATE_BASE_H
