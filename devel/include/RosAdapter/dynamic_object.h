// Generated by gencpp from file RosAdapter/dynamic_object.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_DYNAMIC_OBJECT_H
#define ROSADAPTER_MESSAGE_DYNAMIC_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <RosAdapter/coord.h>
#include <RosAdapter/coord.h>
#include <RosAdapter/coord.h>
#include <RosAdapter/coord.h>
#include <RosAdapter/coord.h>
#include <RosAdapter/coord.h>
#include <RosAdapter/point3d.h>

namespace RosAdapter
{
template <class ContainerAllocator>
struct dynamic_object_
{
  typedef dynamic_object_<ContainerAllocator> Type;

  dynamic_object_()
    : u8Dist(0.0)
    , u8NearestDist(0.0)
    , u8RelativeVelx(0.0)
    , u8RelativeVely(0.0)
    , u8RelativeAccx(0.0)
    , u8RelativeAccy(0.0)
    , u8HeadingAngle(0.0)
    , sSensorPos()
    , sNearestSensorPos()
    , sSenNearestPosXL()
    , sSenNearestPosXR()
    , sSenNearestPosYL()
    , sSenNearestPosYR()
    , sBoundingBox()
    , u1MovingSt(0)  {
    }
  dynamic_object_(const ContainerAllocator& _alloc)
    : u8Dist(0.0)
    , u8NearestDist(0.0)
    , u8RelativeVelx(0.0)
    , u8RelativeVely(0.0)
    , u8RelativeAccx(0.0)
    , u8RelativeAccy(0.0)
    , u8HeadingAngle(0.0)
    , sSensorPos(_alloc)
    , sNearestSensorPos(_alloc)
    , sSenNearestPosXL(_alloc)
    , sSenNearestPosXR(_alloc)
    , sSenNearestPosYL(_alloc)
    , sSenNearestPosYR(_alloc)
    , sBoundingBox(_alloc)
    , u1MovingSt(0)  {
  (void)_alloc;
    }



   typedef double _u8Dist_type;
  _u8Dist_type u8Dist;

   typedef double _u8NearestDist_type;
  _u8NearestDist_type u8NearestDist;

   typedef double _u8RelativeVelx_type;
  _u8RelativeVelx_type u8RelativeVelx;

   typedef double _u8RelativeVely_type;
  _u8RelativeVely_type u8RelativeVely;

   typedef double _u8RelativeAccx_type;
  _u8RelativeAccx_type u8RelativeAccx;

   typedef double _u8RelativeAccy_type;
  _u8RelativeAccy_type u8RelativeAccy;

   typedef double _u8HeadingAngle_type;
  _u8HeadingAngle_type u8HeadingAngle;

   typedef  ::RosAdapter::coord_<ContainerAllocator>  _sSensorPos_type;
  _sSensorPos_type sSensorPos;

   typedef  ::RosAdapter::coord_<ContainerAllocator>  _sNearestSensorPos_type;
  _sNearestSensorPos_type sNearestSensorPos;

   typedef  ::RosAdapter::coord_<ContainerAllocator>  _sSenNearestPosXL_type;
  _sSenNearestPosXL_type sSenNearestPosXL;

   typedef  ::RosAdapter::coord_<ContainerAllocator>  _sSenNearestPosXR_type;
  _sSenNearestPosXR_type sSenNearestPosXR;

   typedef  ::RosAdapter::coord_<ContainerAllocator>  _sSenNearestPosYL_type;
  _sSenNearestPosYL_type sSenNearestPosYL;

   typedef  ::RosAdapter::coord_<ContainerAllocator>  _sSenNearestPosYR_type;
  _sSenNearestPosYR_type sSenNearestPosYR;

   typedef std::vector< ::RosAdapter::point3d_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::point3d_<ContainerAllocator> >> _sBoundingBox_type;
  _sBoundingBox_type sBoundingBox;

   typedef uint8_t _u1MovingSt_type;
  _u1MovingSt_type u1MovingSt;





  typedef boost::shared_ptr< ::RosAdapter::dynamic_object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::dynamic_object_<ContainerAllocator> const> ConstPtr;

}; // struct dynamic_object_

typedef ::RosAdapter::dynamic_object_<std::allocator<void> > dynamic_object;

typedef boost::shared_ptr< ::RosAdapter::dynamic_object > dynamic_objectPtr;
typedef boost::shared_ptr< ::RosAdapter::dynamic_object const> dynamic_objectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::dynamic_object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::dynamic_object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::dynamic_object_<ContainerAllocator1> & lhs, const ::RosAdapter::dynamic_object_<ContainerAllocator2> & rhs)
{
  return lhs.u8Dist == rhs.u8Dist &&
    lhs.u8NearestDist == rhs.u8NearestDist &&
    lhs.u8RelativeVelx == rhs.u8RelativeVelx &&
    lhs.u8RelativeVely == rhs.u8RelativeVely &&
    lhs.u8RelativeAccx == rhs.u8RelativeAccx &&
    lhs.u8RelativeAccy == rhs.u8RelativeAccy &&
    lhs.u8HeadingAngle == rhs.u8HeadingAngle &&
    lhs.sSensorPos == rhs.sSensorPos &&
    lhs.sNearestSensorPos == rhs.sNearestSensorPos &&
    lhs.sSenNearestPosXL == rhs.sSenNearestPosXL &&
    lhs.sSenNearestPosXR == rhs.sSenNearestPosXR &&
    lhs.sSenNearestPosYL == rhs.sSenNearestPosYL &&
    lhs.sSenNearestPosYR == rhs.sSenNearestPosYR &&
    lhs.sBoundingBox == rhs.sBoundingBox &&
    lhs.u1MovingSt == rhs.u1MovingSt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::dynamic_object_<ContainerAllocator1> & lhs, const ::RosAdapter::dynamic_object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::dynamic_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::dynamic_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::dynamic_object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::dynamic_object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::dynamic_object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::dynamic_object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::dynamic_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0fca4830c1def89864a68dc2897f16f";
  }

  static const char* value(const ::RosAdapter::dynamic_object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0fca4830c1def89ULL;
  static const uint64_t static_value2 = 0x864a68dc2897f16fULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::dynamic_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/dynamic_object";
  }

  static const char* value(const ::RosAdapter::dynamic_object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::dynamic_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------ 传感器探测到的对象信息 ------ */\n"
"\n"
"float64    u8Dist\n"
"float64    u8NearestDist\n"
"float64    u8RelativeVelx\n"
"float64    u8RelativeVely\n"
"float64    u8RelativeAccx\n"
"float64    u8RelativeAccy\n"
"float64    u8HeadingAngle\n"
"coord      sSensorPos\n"
"coord      sNearestSensorPos\n"
"coord      sSenNearestPosXL\n"
"coord      sSenNearestPosXR\n"
"coord      sSenNearestPosYL\n"
"coord      sSenNearestPosYR\n"
"point3d[]  sBoundingBox\n"
"uint8      u1MovingSt\n"
"================================================================================\n"
"MSG: RosAdapter/coord\n"
"# /** ------ 坐标 ------ */\n"
"float64   u8X\n"
"float64   u8Y\n"
"float64   u8Z\n"
"float32   u4H\n"
"float32   u4P\n"
"float32   u4R\n"
"uint8     u1Type\n"
"================================================================================\n"
"MSG: RosAdapter/point3d\n"
"float64      u8x\n"
"float64      u8y\n"
"float64      u8z\n"
;
  }

  static const char* value(const ::RosAdapter::dynamic_object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::dynamic_object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u8Dist);
      stream.next(m.u8NearestDist);
      stream.next(m.u8RelativeVelx);
      stream.next(m.u8RelativeVely);
      stream.next(m.u8RelativeAccx);
      stream.next(m.u8RelativeAccy);
      stream.next(m.u8HeadingAngle);
      stream.next(m.sSensorPos);
      stream.next(m.sNearestSensorPos);
      stream.next(m.sSenNearestPosXL);
      stream.next(m.sSenNearestPosXR);
      stream.next(m.sSenNearestPosYL);
      stream.next(m.sSenNearestPosYR);
      stream.next(m.sBoundingBox);
      stream.next(m.u1MovingSt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dynamic_object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::dynamic_object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::dynamic_object_<ContainerAllocator>& v)
  {
    s << indent << "u8Dist: ";
    Printer<double>::stream(s, indent + "  ", v.u8Dist);
    s << indent << "u8NearestDist: ";
    Printer<double>::stream(s, indent + "  ", v.u8NearestDist);
    s << indent << "u8RelativeVelx: ";
    Printer<double>::stream(s, indent + "  ", v.u8RelativeVelx);
    s << indent << "u8RelativeVely: ";
    Printer<double>::stream(s, indent + "  ", v.u8RelativeVely);
    s << indent << "u8RelativeAccx: ";
    Printer<double>::stream(s, indent + "  ", v.u8RelativeAccx);
    s << indent << "u8RelativeAccy: ";
    Printer<double>::stream(s, indent + "  ", v.u8RelativeAccy);
    s << indent << "u8HeadingAngle: ";
    Printer<double>::stream(s, indent + "  ", v.u8HeadingAngle);
    s << indent << "sSensorPos: ";
    s << std::endl;
    Printer< ::RosAdapter::coord_<ContainerAllocator> >::stream(s, indent + "  ", v.sSensorPos);
    s << indent << "sNearestSensorPos: ";
    s << std::endl;
    Printer< ::RosAdapter::coord_<ContainerAllocator> >::stream(s, indent + "  ", v.sNearestSensorPos);
    s << indent << "sSenNearestPosXL: ";
    s << std::endl;
    Printer< ::RosAdapter::coord_<ContainerAllocator> >::stream(s, indent + "  ", v.sSenNearestPosXL);
    s << indent << "sSenNearestPosXR: ";
    s << std::endl;
    Printer< ::RosAdapter::coord_<ContainerAllocator> >::stream(s, indent + "  ", v.sSenNearestPosXR);
    s << indent << "sSenNearestPosYL: ";
    s << std::endl;
    Printer< ::RosAdapter::coord_<ContainerAllocator> >::stream(s, indent + "  ", v.sSenNearestPosYL);
    s << indent << "sSenNearestPosYR: ";
    s << std::endl;
    Printer< ::RosAdapter::coord_<ContainerAllocator> >::stream(s, indent + "  ", v.sSenNearestPosYR);
    s << indent << "sBoundingBox[]" << std::endl;
    for (size_t i = 0; i < v.sBoundingBox.size(); ++i)
    {
      s << indent << "  sBoundingBox[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::point3d_<ContainerAllocator> >::stream(s, indent + "    ", v.sBoundingBox[i]);
    }
    s << indent << "u1MovingSt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1MovingSt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_DYNAMIC_OBJECT_H
