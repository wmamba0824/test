// Generated by gencpp from file RosAdapter/traffic_light.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_TRAFFIC_LIGHT_H
#define ROSADAPTER_MESSAGE_TRAFFIC_LIGHT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <RosAdapter/traffic_light_phase.h>

namespace RosAdapter
{
template <class ContainerAllocator>
struct traffic_light_
{
  typedef traffic_light_<ContainerAllocator> Type;

  traffic_light_()
    : u4Id(0)
    , u4CtrlId(0)
    , u4NoPhases(0)
    , u4DataSize(0)
    , u4State(0.0)
    , u4CycleTime(0.0)
    , phases()  {
    }
  traffic_light_(const ContainerAllocator& _alloc)
    : u4Id(0)
    , u4CtrlId(0)
    , u4NoPhases(0)
    , u4DataSize(0)
    , u4State(0.0)
    , u4CycleTime(0.0)
    , phases(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _u4Id_type;
  _u4Id_type u4Id;

   typedef int32_t _u4CtrlId_type;
  _u4CtrlId_type u4CtrlId;

   typedef uint32_t _u4NoPhases_type;
  _u4NoPhases_type u4NoPhases;

   typedef uint32_t _u4DataSize_type;
  _u4DataSize_type u4DataSize;

   typedef float _u4State_type;
  _u4State_type u4State;

   typedef float _u4CycleTime_type;
  _u4CycleTime_type u4CycleTime;

   typedef std::vector< ::RosAdapter::traffic_light_phase_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::traffic_light_phase_<ContainerAllocator> >> _phases_type;
  _phases_type phases;





  typedef boost::shared_ptr< ::RosAdapter::traffic_light_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::traffic_light_<ContainerAllocator> const> ConstPtr;

}; // struct traffic_light_

typedef ::RosAdapter::traffic_light_<std::allocator<void> > traffic_light;

typedef boost::shared_ptr< ::RosAdapter::traffic_light > traffic_lightPtr;
typedef boost::shared_ptr< ::RosAdapter::traffic_light const> traffic_lightConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::traffic_light_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::traffic_light_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::traffic_light_<ContainerAllocator1> & lhs, const ::RosAdapter::traffic_light_<ContainerAllocator2> & rhs)
{
  return lhs.u4Id == rhs.u4Id &&
    lhs.u4CtrlId == rhs.u4CtrlId &&
    lhs.u4NoPhases == rhs.u4NoPhases &&
    lhs.u4DataSize == rhs.u4DataSize &&
    lhs.u4State == rhs.u4State &&
    lhs.u4CycleTime == rhs.u4CycleTime &&
    lhs.phases == rhs.phases;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::traffic_light_<ContainerAllocator1> & lhs, const ::RosAdapter::traffic_light_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::traffic_light_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::traffic_light_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::traffic_light_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::traffic_light_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::traffic_light_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::traffic_light_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::traffic_light_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05f765de27ecea681bdb9de73fefe6a1";
  }

  static const char* value(const ::RosAdapter::traffic_light_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05f765de27ecea68ULL;
  static const uint64_t static_value2 = 0x1bdb9de73fefe6a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::traffic_light_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/traffic_light";
  }

  static const char* value(const ::RosAdapter::traffic_light_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::traffic_light_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------ 交通灯信息 ------ */\n"
"int32                    u4Id\n"
"int32                    u4CtrlId\n"
"uint32                   u4NoPhases\n"
"uint32                   u4DataSize\n"
"float32                  u4State\n"
"float32                  u4CycleTime\n"
"traffic_light_phase[]    phases\n"
"================================================================================\n"
"MSG: RosAdapter/traffic_light_phase\n"
"# /** ------ 交通灯相位信息 ------ */\n"
"\n"
"float32     u4Duration\n"
"uint8       u1Status   \n"
;
  }

  static const char* value(const ::RosAdapter::traffic_light_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::traffic_light_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u4Id);
      stream.next(m.u4CtrlId);
      stream.next(m.u4NoPhases);
      stream.next(m.u4DataSize);
      stream.next(m.u4State);
      stream.next(m.u4CycleTime);
      stream.next(m.phases);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct traffic_light_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::traffic_light_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::traffic_light_<ContainerAllocator>& v)
  {
    s << indent << "u4Id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.u4Id);
    s << indent << "u4CtrlId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.u4CtrlId);
    s << indent << "u4NoPhases: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4NoPhases);
    s << indent << "u4DataSize: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4DataSize);
    s << indent << "u4State: ";
    Printer<float>::stream(s, indent + "  ", v.u4State);
    s << indent << "u4CycleTime: ";
    Printer<float>::stream(s, indent + "  ", v.u4CycleTime);
    s << indent << "phases[]" << std::endl;
    for (size_t i = 0; i < v.phases.size(); ++i)
    {
      s << indent << "  phases[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::traffic_light_phase_<ContainerAllocator> >::stream(s, indent + "    ", v.phases[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_TRAFFIC_LIGHT_H
