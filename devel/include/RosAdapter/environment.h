// Generated by gencpp from file RosAdapter/environment.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_ENVIRONMENT_H
#define ROSADAPTER_MESSAGE_ENVIRONMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct environment_
{
  typedef environment_<ContainerAllocator> Type;

  environment_()
    : u8RainIntensity(0.0)
    , u8SnowIntensity(0.0)
    , u8FogIntensity(0.0)
    , u8FogVisualRange(0.0)
    , u4TimeOfDay(0)
    , u2TimeZoneMinutesWest(0)
    , u2Year(0)
    , u1CloudState(0)
    , u1Day(0)
    , u1Month(0)  {
    }
  environment_(const ContainerAllocator& _alloc)
    : u8RainIntensity(0.0)
    , u8SnowIntensity(0.0)
    , u8FogIntensity(0.0)
    , u8FogVisualRange(0.0)
    , u4TimeOfDay(0)
    , u2TimeZoneMinutesWest(0)
    , u2Year(0)
    , u1CloudState(0)
    , u1Day(0)
    , u1Month(0)  {
  (void)_alloc;
    }



   typedef double _u8RainIntensity_type;
  _u8RainIntensity_type u8RainIntensity;

   typedef double _u8SnowIntensity_type;
  _u8SnowIntensity_type u8SnowIntensity;

   typedef double _u8FogIntensity_type;
  _u8FogIntensity_type u8FogIntensity;

   typedef double _u8FogVisualRange_type;
  _u8FogVisualRange_type u8FogVisualRange;

   typedef uint32_t _u4TimeOfDay_type;
  _u4TimeOfDay_type u4TimeOfDay;

   typedef int16_t _u2TimeZoneMinutesWest_type;
  _u2TimeZoneMinutesWest_type u2TimeZoneMinutesWest;

   typedef uint16_t _u2Year_type;
  _u2Year_type u2Year;

   typedef uint8_t _u1CloudState_type;
  _u1CloudState_type u1CloudState;

   typedef uint8_t _u1Day_type;
  _u1Day_type u1Day;

   typedef uint8_t _u1Month_type;
  _u1Month_type u1Month;





  typedef boost::shared_ptr< ::RosAdapter::environment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::environment_<ContainerAllocator> const> ConstPtr;

}; // struct environment_

typedef ::RosAdapter::environment_<std::allocator<void> > environment;

typedef boost::shared_ptr< ::RosAdapter::environment > environmentPtr;
typedef boost::shared_ptr< ::RosAdapter::environment const> environmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::environment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::environment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::environment_<ContainerAllocator1> & lhs, const ::RosAdapter::environment_<ContainerAllocator2> & rhs)
{
  return lhs.u8RainIntensity == rhs.u8RainIntensity &&
    lhs.u8SnowIntensity == rhs.u8SnowIntensity &&
    lhs.u8FogIntensity == rhs.u8FogIntensity &&
    lhs.u8FogVisualRange == rhs.u8FogVisualRange &&
    lhs.u4TimeOfDay == rhs.u4TimeOfDay &&
    lhs.u2TimeZoneMinutesWest == rhs.u2TimeZoneMinutesWest &&
    lhs.u2Year == rhs.u2Year &&
    lhs.u1CloudState == rhs.u1CloudState &&
    lhs.u1Day == rhs.u1Day &&
    lhs.u1Month == rhs.u1Month;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::environment_<ContainerAllocator1> & lhs, const ::RosAdapter::environment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::environment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::environment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::environment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::environment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::environment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd90b74b2548174d66e34a98a2d7dbde";
  }

  static const char* value(const ::RosAdapter::environment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd90b74b2548174dULL;
  static const uint64_t static_value2 = 0x66e34a98a2d7dbdeULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/environment";
  }

  static const char* value(const ::RosAdapter::environment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::environment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------ 环境信息 ------ */\n"
"float64      u8RainIntensity\n"
"float64      u8SnowIntensity\n"
"float64      u8FogIntensity\n"
"float64      u8FogVisualRange\n"
"uint32       u4TimeOfDay\n"
"int16        u2TimeZoneMinutesWest\n"
"uint16       u2Year\n"
"uint8        u1CloudState\n"
"uint8        u1Day\n"
"uint8        u1Month\n"
;
  }

  static const char* value(const ::RosAdapter::environment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::environment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u8RainIntensity);
      stream.next(m.u8SnowIntensity);
      stream.next(m.u8FogIntensity);
      stream.next(m.u8FogVisualRange);
      stream.next(m.u4TimeOfDay);
      stream.next(m.u2TimeZoneMinutesWest);
      stream.next(m.u2Year);
      stream.next(m.u1CloudState);
      stream.next(m.u1Day);
      stream.next(m.u1Month);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct environment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::environment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::environment_<ContainerAllocator>& v)
  {
    s << indent << "u8RainIntensity: ";
    Printer<double>::stream(s, indent + "  ", v.u8RainIntensity);
    s << indent << "u8SnowIntensity: ";
    Printer<double>::stream(s, indent + "  ", v.u8SnowIntensity);
    s << indent << "u8FogIntensity: ";
    Printer<double>::stream(s, indent + "  ", v.u8FogIntensity);
    s << indent << "u8FogVisualRange: ";
    Printer<double>::stream(s, indent + "  ", v.u8FogVisualRange);
    s << indent << "u4TimeOfDay: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4TimeOfDay);
    s << indent << "u2TimeZoneMinutesWest: ";
    Printer<int16_t>::stream(s, indent + "  ", v.u2TimeZoneMinutesWest);
    s << indent << "u2Year: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u2Year);
    s << indent << "u1CloudState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1CloudState);
    s << indent << "u1Day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1Day);
    s << indent << "u1Month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1Month);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_ENVIRONMENT_H
