// Generated by gencpp from file RosAdapter/sign_object.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_SIGN_OBJECT_H
#define ROSADAPTER_MESSAGE_SIGN_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <RosAdapter/coord.h>
#include <RosAdapter/coord.h>

namespace RosAdapter
{
template <class ContainerAllocator>
struct sign_object_
{
  typedef sign_object_<ContainerAllocator> Type;

  sign_object_()
    : u8Dist(0.0)
    , u8NearestDist(0.0)
    , u8TrafficSignDistX(0.0)
    , u8TrafficSignDistY(0.0)
    , sSensorPos()
    , sNearestSensorPos()
    , u1TrafficSignType(0)  {
    }
  sign_object_(const ContainerAllocator& _alloc)
    : u8Dist(0.0)
    , u8NearestDist(0.0)
    , u8TrafficSignDistX(0.0)
    , u8TrafficSignDistY(0.0)
    , sSensorPos(_alloc)
    , sNearestSensorPos(_alloc)
    , u1TrafficSignType(0)  {
  (void)_alloc;
    }



   typedef double _u8Dist_type;
  _u8Dist_type u8Dist;

   typedef double _u8NearestDist_type;
  _u8NearestDist_type u8NearestDist;

   typedef double _u8TrafficSignDistX_type;
  _u8TrafficSignDistX_type u8TrafficSignDistX;

   typedef double _u8TrafficSignDistY_type;
  _u8TrafficSignDistY_type u8TrafficSignDistY;

   typedef  ::RosAdapter::coord_<ContainerAllocator>  _sSensorPos_type;
  _sSensorPos_type sSensorPos;

   typedef  ::RosAdapter::coord_<ContainerAllocator>  _sNearestSensorPos_type;
  _sNearestSensorPos_type sNearestSensorPos;

   typedef uint8_t _u1TrafficSignType_type;
  _u1TrafficSignType_type u1TrafficSignType;





  typedef boost::shared_ptr< ::RosAdapter::sign_object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::sign_object_<ContainerAllocator> const> ConstPtr;

}; // struct sign_object_

typedef ::RosAdapter::sign_object_<std::allocator<void> > sign_object;

typedef boost::shared_ptr< ::RosAdapter::sign_object > sign_objectPtr;
typedef boost::shared_ptr< ::RosAdapter::sign_object const> sign_objectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::sign_object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::sign_object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::sign_object_<ContainerAllocator1> & lhs, const ::RosAdapter::sign_object_<ContainerAllocator2> & rhs)
{
  return lhs.u8Dist == rhs.u8Dist &&
    lhs.u8NearestDist == rhs.u8NearestDist &&
    lhs.u8TrafficSignDistX == rhs.u8TrafficSignDistX &&
    lhs.u8TrafficSignDistY == rhs.u8TrafficSignDistY &&
    lhs.sSensorPos == rhs.sSensorPos &&
    lhs.sNearestSensorPos == rhs.sNearestSensorPos &&
    lhs.u1TrafficSignType == rhs.u1TrafficSignType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::sign_object_<ContainerAllocator1> & lhs, const ::RosAdapter::sign_object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::sign_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::sign_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::sign_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::sign_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::sign_object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::sign_object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::sign_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "126cf5cd9bff85cc03e9822c09ab25cf";
  }

  static const char* value(const ::RosAdapter::sign_object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x126cf5cd9bff85ccULL;
  static const uint64_t static_value2 = 0x03e9822c09ab25cfULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::sign_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/sign_object";
  }

  static const char* value(const ::RosAdapter::sign_object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::sign_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 交通标志\n"
"\n"
"float64   u8Dist\n"
"float64   u8NearestDist\n"
"float64   u8TrafficSignDistX\n"
"float64   u8TrafficSignDistY\n"
"coord     sSensorPos\n"
"coord     sNearestSensorPos\n"
"uint8     u1TrafficSignType\n"
"================================================================================\n"
"MSG: RosAdapter/coord\n"
"# /** ------ 坐标 ------ */\n"
"float64   u8X\n"
"float64   u8Y\n"
"float64   u8Z\n"
"float32   u4H\n"
"float32   u4P\n"
"float32   u4R\n"
"uint8     u1Type\n"
;
  }

  static const char* value(const ::RosAdapter::sign_object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::sign_object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u8Dist);
      stream.next(m.u8NearestDist);
      stream.next(m.u8TrafficSignDistX);
      stream.next(m.u8TrafficSignDistY);
      stream.next(m.sSensorPos);
      stream.next(m.sNearestSensorPos);
      stream.next(m.u1TrafficSignType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sign_object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::sign_object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::sign_object_<ContainerAllocator>& v)
  {
    s << indent << "u8Dist: ";
    Printer<double>::stream(s, indent + "  ", v.u8Dist);
    s << indent << "u8NearestDist: ";
    Printer<double>::stream(s, indent + "  ", v.u8NearestDist);
    s << indent << "u8TrafficSignDistX: ";
    Printer<double>::stream(s, indent + "  ", v.u8TrafficSignDistX);
    s << indent << "u8TrafficSignDistY: ";
    Printer<double>::stream(s, indent + "  ", v.u8TrafficSignDistY);
    s << indent << "sSensorPos: ";
    s << std::endl;
    Printer< ::RosAdapter::coord_<ContainerAllocator> >::stream(s, indent + "  ", v.sSensorPos);
    s << indent << "sNearestSensorPos: ";
    s << std::endl;
    Printer< ::RosAdapter::coord_<ContainerAllocator> >::stream(s, indent + "  ", v.sNearestSensorPos);
    s << indent << "u1TrafficSignType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u1TrafficSignType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_SIGN_OBJECT_H
