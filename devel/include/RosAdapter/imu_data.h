// Generated by gencpp from file RosAdapter/imu_data.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_IMU_DATA_H
#define ROSADAPTER_MESSAGE_IMU_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct imu_data_
{
  typedef imu_data_<ContainerAllocator> Type;

  imu_data_()
    : msgcnt(0)
    , u8X(0.0)
    , u8Y(0.0)
    , u8Z(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)  {
    }
  imu_data_(const ContainerAllocator& _alloc)
    : msgcnt(0)
    , u8X(0.0)
    , u8Y(0.0)
    , u8Z(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _msgcnt_type;
  _msgcnt_type msgcnt;

   typedef double _u8X_type;
  _u8X_type u8X;

   typedef double _u8Y_type;
  _u8Y_type u8Y;

   typedef double _u8Z_type;
  _u8Z_type u8Z;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;





  typedef boost::shared_ptr< ::RosAdapter::imu_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::imu_data_<ContainerAllocator> const> ConstPtr;

}; // struct imu_data_

typedef ::RosAdapter::imu_data_<std::allocator<void> > imu_data;

typedef boost::shared_ptr< ::RosAdapter::imu_data > imu_dataPtr;
typedef boost::shared_ptr< ::RosAdapter::imu_data const> imu_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::imu_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::imu_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::imu_data_<ContainerAllocator1> & lhs, const ::RosAdapter::imu_data_<ContainerAllocator2> & rhs)
{
  return lhs.msgcnt == rhs.msgcnt &&
    lhs.u8X == rhs.u8X &&
    lhs.u8Y == rhs.u8Y &&
    lhs.u8Z == rhs.u8Z &&
    lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::imu_data_<ContainerAllocator1> & lhs, const ::RosAdapter::imu_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::imu_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::imu_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::imu_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::imu_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::imu_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::imu_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4178d59bbaf80ca00b22a79f7e80938d";
  }

  static const char* value(const ::RosAdapter::imu_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4178d59bbaf80ca0ULL;
  static const uint64_t static_value2 = 0x0b22a79f7e80938dULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/imu_data";
  }

  static const char* value(const ::RosAdapter::imu_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8         msgcnt\n"
"float64       u8X\n"
"float64       u8Y\n"
"float64       u8Z\n"
"float64       yaw\n"
"float64       pitch\n"
"float64       roll\n"
;
  }

  static const char* value(const ::RosAdapter::imu_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::imu_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msgcnt);
      stream.next(m.u8X);
      stream.next(m.u8Y);
      stream.next(m.u8Z);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::imu_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::imu_data_<ContainerAllocator>& v)
  {
    s << indent << "msgcnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msgcnt);
    s << indent << "u8X: ";
    Printer<double>::stream(s, indent + "  ", v.u8X);
    s << indent << "u8Y: ";
    Printer<double>::stream(s, indent + "  ", v.u8Y);
    s << indent << "u8Z: ";
    Printer<double>::stream(s, indent + "  ", v.u8Z);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_IMU_DATA_H
