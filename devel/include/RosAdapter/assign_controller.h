// Generated by gencpp from file RosAdapter/assign_controller.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_ASSIGN_CONTROLLER_H
#define ROSADAPTER_MESSAGE_ASSIGN_CONTROLLER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <RosAdapter/assign_controller_property.h>

namespace RosAdapter
{
template <class ContainerAllocator>
struct assign_controller_
{
  typedef assign_controller_<ContainerAllocator> Type;

  assign_controller_()
    : au1ControllerName()
    , u4ObjectId(0)
    , u4PropertyNum(0)
    , properties()  {
    }
  assign_controller_(const ContainerAllocator& _alloc)
    : au1ControllerName(_alloc)
    , u4ObjectId(0)
    , u4PropertyNum(0)
    , properties(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _au1ControllerName_type;
  _au1ControllerName_type au1ControllerName;

   typedef uint32_t _u4ObjectId_type;
  _u4ObjectId_type u4ObjectId;

   typedef uint32_t _u4PropertyNum_type;
  _u4PropertyNum_type u4PropertyNum;

   typedef std::vector< ::RosAdapter::assign_controller_property_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::assign_controller_property_<ContainerAllocator> >> _properties_type;
  _properties_type properties;





  typedef boost::shared_ptr< ::RosAdapter::assign_controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::assign_controller_<ContainerAllocator> const> ConstPtr;

}; // struct assign_controller_

typedef ::RosAdapter::assign_controller_<std::allocator<void> > assign_controller;

typedef boost::shared_ptr< ::RosAdapter::assign_controller > assign_controllerPtr;
typedef boost::shared_ptr< ::RosAdapter::assign_controller const> assign_controllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::assign_controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::assign_controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::assign_controller_<ContainerAllocator1> & lhs, const ::RosAdapter::assign_controller_<ContainerAllocator2> & rhs)
{
  return lhs.au1ControllerName == rhs.au1ControllerName &&
    lhs.u4ObjectId == rhs.u4ObjectId &&
    lhs.u4PropertyNum == rhs.u4PropertyNum &&
    lhs.properties == rhs.properties;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::assign_controller_<ContainerAllocator1> & lhs, const ::RosAdapter::assign_controller_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::assign_controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::assign_controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::assign_controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::assign_controller_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::assign_controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::assign_controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::assign_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b69f794058ba5b23b8c59db3ddbf21fb";
  }

  static const char* value(const ::RosAdapter::assign_controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb69f794058ba5b23ULL;
  static const uint64_t static_value2 = 0xb8c59db3ddbf21fbULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::assign_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/assign_controller";
  }

  static const char* value(const ::RosAdapter::assign_controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::assign_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------分配控制器 ------ */\n"
"\n"
"string                               au1ControllerName\n"
"uint32                               u4ObjectId\n"
"uint32                               u4PropertyNum\n"
"assign_controller_property[]         properties\n"
"================================================================================\n"
"MSG: RosAdapter/assign_controller_property\n"
"# /** ------分配控制器的属性信息 ------ */\n"
"\n"
"string   au1Name\n"
"string   au1Value\n"
;
  }

  static const char* value(const ::RosAdapter::assign_controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::assign_controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.au1ControllerName);
      stream.next(m.u4ObjectId);
      stream.next(m.u4PropertyNum);
      stream.next(m.properties);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct assign_controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::assign_controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::assign_controller_<ContainerAllocator>& v)
  {
    s << indent << "au1ControllerName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.au1ControllerName);
    s << indent << "u4ObjectId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4ObjectId);
    s << indent << "u4PropertyNum: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4PropertyNum);
    s << indent << "properties[]" << std::endl;
    for (size_t i = 0; i < v.properties.size(); ++i)
    {
      s << indent << "  properties[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::assign_controller_property_<ContainerAllocator> >::stream(s, indent + "    ", v.properties[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_ASSIGN_CONTROLLER_H
