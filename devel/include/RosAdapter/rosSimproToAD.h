// Generated by gencpp from file RosAdapter/rosSimproToAD.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_ROSSIMPROTOAD_H
#define ROSADAPTER_MESSAGE_ROSSIMPROTOAD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <RosAdapter/header.h>
#include <RosAdapter/lane_info.h>
#include <RosAdapter/sensor_info.h>
#include <RosAdapter/sensor_detection_info.h>
#include <RosAdapter/contact_point.h>
#include <RosAdapter/traffic_sign.h>
#include <RosAdapter/road_state.h>
#include <RosAdapter/environment.h>
#include <RosAdapter/traffic_light.h>
#include <RosAdapter/road_query.h>
#include <RosAdapter/mil_ego_state.h>
#include <RosAdapter/mil_object_state.h>
#include <RosAdapter/mil_roadmark.h>
#include <RosAdapter/init_param.h>
#include <RosAdapter/mil_amesim_signal.h>
#include <RosAdapter/activate_controller.h>
#include <RosAdapter/assign_controller.h>
#include <RosAdapter/override_controller.h>
#include <RosAdapter/custom_command.h>
#include <RosAdapter/parkingSpace.h>
#include <RosAdapter/driver_ctrl.h>
#include <RosAdapter/sync.h>
#include <RosAdapter/imu_data.h>
#include <RosAdapter/gnss_gga.h>
#include <RosAdapter/uwb_data.h>
#include <RosAdapter/model_outline.h>
#include <RosAdapter/rsu_vnfp_info.h>

namespace RosAdapter
{
template <class ContainerAllocator>
struct rosSimproToAD_
{
  typedef rosSimproToAD_<ContainerAllocator> Type;

  rosSimproToAD_()
    : head()
    , laneInfos()
    , sensorStates()
    , sensorObjects()
    , contactPoints()
    , trafficSigns()
    , roadStates()
    , environments()
    , trafficLights()
    , roadQueries()
    , egoStates()
    , milObjStates()
    , milRoadMarks()
    , initParams()
    , milAmesimSignals()
    , activateControllers()
    , assignControllers()
    , overrideControllers()
    , customCommands()
    , parkingSpaces()
    , driverCtrls()
    , syncs()
    , imuDatas()
    , gnssGgaS()
    , uwbDatas()
    , modelOutlines()
    , rsuVnfpInfo()  {
    }
  rosSimproToAD_(const ContainerAllocator& _alloc)
    : head(_alloc)
    , laneInfos(_alloc)
    , sensorStates(_alloc)
    , sensorObjects(_alloc)
    , contactPoints(_alloc)
    , trafficSigns(_alloc)
    , roadStates(_alloc)
    , environments(_alloc)
    , trafficLights(_alloc)
    , roadQueries(_alloc)
    , egoStates(_alloc)
    , milObjStates(_alloc)
    , milRoadMarks(_alloc)
    , initParams(_alloc)
    , milAmesimSignals(_alloc)
    , activateControllers(_alloc)
    , assignControllers(_alloc)
    , overrideControllers(_alloc)
    , customCommands(_alloc)
    , parkingSpaces(_alloc)
    , driverCtrls(_alloc)
    , syncs(_alloc)
    , imuDatas(_alloc)
    , gnssGgaS(_alloc)
    , uwbDatas(_alloc)
    , modelOutlines(_alloc)
    , rsuVnfpInfo(_alloc)  {
  (void)_alloc;
    }



   typedef  ::RosAdapter::header_<ContainerAllocator>  _head_type;
  _head_type head;

   typedef std::vector< ::RosAdapter::lane_info_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::lane_info_<ContainerAllocator> >> _laneInfos_type;
  _laneInfos_type laneInfos;

   typedef std::vector< ::RosAdapter::sensor_info_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::sensor_info_<ContainerAllocator> >> _sensorStates_type;
  _sensorStates_type sensorStates;

   typedef std::vector< ::RosAdapter::sensor_detection_info_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::sensor_detection_info_<ContainerAllocator> >> _sensorObjects_type;
  _sensorObjects_type sensorObjects;

   typedef std::vector< ::RosAdapter::contact_point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::contact_point_<ContainerAllocator> >> _contactPoints_type;
  _contactPoints_type contactPoints;

   typedef std::vector< ::RosAdapter::traffic_sign_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::traffic_sign_<ContainerAllocator> >> _trafficSigns_type;
  _trafficSigns_type trafficSigns;

   typedef std::vector< ::RosAdapter::road_state_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::road_state_<ContainerAllocator> >> _roadStates_type;
  _roadStates_type roadStates;

   typedef std::vector< ::RosAdapter::environment_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::environment_<ContainerAllocator> >> _environments_type;
  _environments_type environments;

   typedef std::vector< ::RosAdapter::traffic_light_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::traffic_light_<ContainerAllocator> >> _trafficLights_type;
  _trafficLights_type trafficLights;

   typedef std::vector< ::RosAdapter::road_query_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::road_query_<ContainerAllocator> >> _roadQueries_type;
  _roadQueries_type roadQueries;

   typedef std::vector< ::RosAdapter::mil_ego_state_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::mil_ego_state_<ContainerAllocator> >> _egoStates_type;
  _egoStates_type egoStates;

   typedef std::vector< ::RosAdapter::mil_object_state_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::mil_object_state_<ContainerAllocator> >> _milObjStates_type;
  _milObjStates_type milObjStates;

   typedef std::vector< ::RosAdapter::mil_roadmark_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::mil_roadmark_<ContainerAllocator> >> _milRoadMarks_type;
  _milRoadMarks_type milRoadMarks;

   typedef std::vector< ::RosAdapter::init_param_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::init_param_<ContainerAllocator> >> _initParams_type;
  _initParams_type initParams;

   typedef std::vector< ::RosAdapter::mil_amesim_signal_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::mil_amesim_signal_<ContainerAllocator> >> _milAmesimSignals_type;
  _milAmesimSignals_type milAmesimSignals;

   typedef std::vector< ::RosAdapter::activate_controller_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::activate_controller_<ContainerAllocator> >> _activateControllers_type;
  _activateControllers_type activateControllers;

   typedef std::vector< ::RosAdapter::assign_controller_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::assign_controller_<ContainerAllocator> >> _assignControllers_type;
  _assignControllers_type assignControllers;

   typedef std::vector< ::RosAdapter::override_controller_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::override_controller_<ContainerAllocator> >> _overrideControllers_type;
  _overrideControllers_type overrideControllers;

   typedef std::vector< ::RosAdapter::custom_command_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::custom_command_<ContainerAllocator> >> _customCommands_type;
  _customCommands_type customCommands;

   typedef std::vector< ::RosAdapter::parkingSpace_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::parkingSpace_<ContainerAllocator> >> _parkingSpaces_type;
  _parkingSpaces_type parkingSpaces;

   typedef std::vector< ::RosAdapter::driver_ctrl_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::driver_ctrl_<ContainerAllocator> >> _driverCtrls_type;
  _driverCtrls_type driverCtrls;

   typedef std::vector< ::RosAdapter::sync_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::sync_<ContainerAllocator> >> _syncs_type;
  _syncs_type syncs;

   typedef std::vector< ::RosAdapter::imu_data_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::imu_data_<ContainerAllocator> >> _imuDatas_type;
  _imuDatas_type imuDatas;

   typedef std::vector< ::RosAdapter::gnss_gga_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::gnss_gga_<ContainerAllocator> >> _gnssGgaS_type;
  _gnssGgaS_type gnssGgaS;

   typedef std::vector< ::RosAdapter::uwb_data_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::uwb_data_<ContainerAllocator> >> _uwbDatas_type;
  _uwbDatas_type uwbDatas;

   typedef std::vector< ::RosAdapter::model_outline_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::RosAdapter::model_outline_<ContainerAllocator> >> _modelOutlines_type;
  _modelOutlines_type modelOutlines;

   typedef  ::RosAdapter::rsu_vnfp_info_<ContainerAllocator>  _rsuVnfpInfo_type;
  _rsuVnfpInfo_type rsuVnfpInfo;





  typedef boost::shared_ptr< ::RosAdapter::rosSimproToAD_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::rosSimproToAD_<ContainerAllocator> const> ConstPtr;

}; // struct rosSimproToAD_

typedef ::RosAdapter::rosSimproToAD_<std::allocator<void> > rosSimproToAD;

typedef boost::shared_ptr< ::RosAdapter::rosSimproToAD > rosSimproToADPtr;
typedef boost::shared_ptr< ::RosAdapter::rosSimproToAD const> rosSimproToADConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::rosSimproToAD_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::rosSimproToAD_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::rosSimproToAD_<ContainerAllocator1> & lhs, const ::RosAdapter::rosSimproToAD_<ContainerAllocator2> & rhs)
{
  return lhs.head == rhs.head &&
    lhs.laneInfos == rhs.laneInfos &&
    lhs.sensorStates == rhs.sensorStates &&
    lhs.sensorObjects == rhs.sensorObjects &&
    lhs.contactPoints == rhs.contactPoints &&
    lhs.trafficSigns == rhs.trafficSigns &&
    lhs.roadStates == rhs.roadStates &&
    lhs.environments == rhs.environments &&
    lhs.trafficLights == rhs.trafficLights &&
    lhs.roadQueries == rhs.roadQueries &&
    lhs.egoStates == rhs.egoStates &&
    lhs.milObjStates == rhs.milObjStates &&
    lhs.milRoadMarks == rhs.milRoadMarks &&
    lhs.initParams == rhs.initParams &&
    lhs.milAmesimSignals == rhs.milAmesimSignals &&
    lhs.activateControllers == rhs.activateControllers &&
    lhs.assignControllers == rhs.assignControllers &&
    lhs.overrideControllers == rhs.overrideControllers &&
    lhs.customCommands == rhs.customCommands &&
    lhs.parkingSpaces == rhs.parkingSpaces &&
    lhs.driverCtrls == rhs.driverCtrls &&
    lhs.syncs == rhs.syncs &&
    lhs.imuDatas == rhs.imuDatas &&
    lhs.gnssGgaS == rhs.gnssGgaS &&
    lhs.uwbDatas == rhs.uwbDatas &&
    lhs.modelOutlines == rhs.modelOutlines &&
    lhs.rsuVnfpInfo == rhs.rsuVnfpInfo;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::rosSimproToAD_<ContainerAllocator1> & lhs, const ::RosAdapter::rosSimproToAD_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::rosSimproToAD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::rosSimproToAD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::rosSimproToAD_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::rosSimproToAD_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::rosSimproToAD_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::rosSimproToAD_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::rosSimproToAD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c51422c0a9306e26c68900e995989ad4";
  }

  static const char* value(const ::RosAdapter::rosSimproToAD_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc51422c0a9306e26ULL;
  static const uint64_t static_value2 = 0xc68900e995989ad4ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::rosSimproToAD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/rosSimproToAD";
  }

  static const char* value(const ::RosAdapter::rosSimproToAD_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::rosSimproToAD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# simpro发送给AD的数据\n"
"header                         head\n"
"lane_info[]                    laneInfos\n"
"sensor_info[]                  sensorStates\n"
"sensor_detection_info[]        sensorObjects\n"
"contact_point[]                contactPoints\n"
"traffic_sign[]                 trafficSigns\n"
"road_state[]                   roadStates\n"
"environment[]                  environments\n"
"traffic_light[]                trafficLights\n"
"road_query[]                   roadQueries\n"
"mil_ego_state[]                egoStates\n"
"mil_object_state[]             milObjStates\n"
"mil_roadmark[]                 milRoadMarks\n"
"init_param[]                   initParams\n"
"mil_amesim_signal[]            milAmesimSignals\n"
"activate_controller[]          activateControllers\n"
"assign_controller[]            assignControllers\n"
"override_controller[]          overrideControllers\n"
"custom_command[]               customCommands\n"
"parkingSpace[]                 parkingSpaces\n"
"driver_ctrl[]                  driverCtrls\n"
"sync[]                         syncs   \n"
"imu_data[]                     imuDatas     \n"
"gnss_gga[]                     gnssGgaS\n"
"uwb_data[]                     uwbDatas\n"
"model_outline[]                modelOutlines\n"
"rsu_vnfp_info                  rsuVnfpInfo\n"
"================================================================================\n"
"MSG: RosAdapter/header\n"
"# /** ------ Msg header ------ */\n"
"float64 u8SimTime\n"
"uint32  u4HeaderSize\n"
"uint32  u4DataSize\n"
"uint32  u4FrameNo\n"
"================================================================================\n"
"MSG: RosAdapter/lane_info\n"
"# /** ------ 车道信息 ------ */\n"
"uint64   u8RoadId\n"
"uint32   u4ObjectId\n"
"float32  u4Width\n"
"uint16   u2Type\n"
"int8     u1Id\n"
"uint8    u1NeighborMask\n"
"int8     u1LeftLaneId\n"
"int8     u1RightLaneId\n"
"================================================================================\n"
"MSG: RosAdapter/sensor_info\n"
"# /** ------ 传感器定义和状态 ------ */\n"
"coord      sPos\n"
"coord      sOriginCoordSys\n"
"string     au1Name\n"
"uint32     u8HostId\n"
"uint32     u8Id\n"
"float32[]  au4FovHV\n"
"float32[]  au4ClipNF\n"
"float32[]  au4FovOffHV\n"
"uint8      u1Type                   \n"
"uint8      u1ModelType\n"
"float64	   u4IdealFreq\n"
"uint32	   u4ResL\n"
"uint32     u4ResV\n"
"float64	   u4SenSizeL\n"
"float64	   u4SenSizeW\n"
"float64	   u4LenFd\n"
"float64	   u4DistCenL\n"
"float64	   u4DistCenW\n"
"float64	   u4DistParK1\n"
"float64	   u4DistParK2\n"
"\n"
"================================================================================\n"
"MSG: RosAdapter/coord\n"
"# /** ------ 坐标 ------ */\n"
"float64   u8X\n"
"float64   u8Y\n"
"float64   u8Z\n"
"float32   u4H\n"
"float32   u4P\n"
"float32   u4R\n"
"uint8     u1Type\n"
"================================================================================\n"
"MSG: RosAdapter/sensor_detection_info\n"
"# 传感器监测物体所有信息\n"
"\n"
"uint32            u4Id\n"
"uint32            u4SensorId\n"
"uint16            u2Flags\n"
"uint8             u1Type\n"
"int8              u1Occlusion\n"
"int8              u1DeltaLanePos\n"
"uint8             u1ValidFlag\n"
"float64           u8ExistProb\n"
"float64           u8TypeIdProb\n"
"object_uion       sExtraInfo\n"
"================================================================================\n"
"MSG: RosAdapter/object_uion\n"
"dynamic_object sDynamicObj\n"
"mark_object    sMarkObj\n"
"sign_object    sSignObj \n"
"================================================================================\n"
"MSG: RosAdapter/dynamic_object\n"
"# /** ------ 传感器探测到的对象信息 ------ */\n"
"\n"
"float64    u8Dist\n"
"float64    u8NearestDist\n"
"float64    u8RelativeVelx\n"
"float64    u8RelativeVely\n"
"float64    u8RelativeAccx\n"
"float64    u8RelativeAccy\n"
"float64    u8HeadingAngle\n"
"coord      sSensorPos\n"
"coord      sNearestSensorPos\n"
"coord      sSenNearestPosXL\n"
"coord      sSenNearestPosXR\n"
"coord      sSenNearestPosYL\n"
"coord      sSenNearestPosYR\n"
"point3d[]  sBoundingBox\n"
"uint8      u1MovingSt\n"
"================================================================================\n"
"MSG: RosAdapter/point3d\n"
"float64      u8x\n"
"float64      u8y\n"
"float64      u8z\n"
"================================================================================\n"
"MSG: RosAdapter/mark_object\n"
"# 车道线\n"
"\n"
"float64[]	 au8RoadMarkCoeffL\n"
"float64[]	 au8RoadMarkCoeffR\n"
"================================================================================\n"
"MSG: RosAdapter/sign_object\n"
"# 交通标志\n"
"\n"
"float64   u8Dist\n"
"float64   u8NearestDist\n"
"float64   u8TrafficSignDistX\n"
"float64   u8TrafficSignDistY\n"
"coord     sSensorPos\n"
"coord     sNearestSensorPos\n"
"uint8     u1TrafficSignType\n"
"================================================================================\n"
"MSG: RosAdapter/contact_point\n"
"# /** ------ 接触点信息 ------ */\n"
"coord  sRoadDataIn\n"
"uint16 u2Id\n"
"================================================================================\n"
"MSG: RosAdapter/traffic_sign\n"
"# /** ------ 交通标志信息 ------ */\n"
"string  au1Type\n"
"coord   sPos\n"
"uint32  u4TrafficSignId\n"
"uint32  u4ObjectId\n"
"string  au1SubType\n"
"float32 u4RoadDist\n"
"float32 u4Value\n"
"int8    u1MinLane\n"
"int8    u1MaxLane\n"
"================================================================================\n"
"MSG: RosAdapter/road_state\n"
"#/** ------ 车辆对应的道路状态 ------ */\n"
"uint64  u8RoadId\n"
"uint32  u4ObjectId\n"
"float32 u4DefaultSpeed\n"
"float32 u4WaterLevel\n"
"float32 u4DistToJunc\n"
"================================================================================\n"
"MSG: RosAdapter/environment\n"
"# /** ------ 环境信息 ------ */\n"
"float64      u8RainIntensity\n"
"float64      u8SnowIntensity\n"
"float64      u8FogIntensity\n"
"float64      u8FogVisualRange\n"
"uint32       u4TimeOfDay\n"
"int16        u2TimeZoneMinutesWest\n"
"uint16       u2Year\n"
"uint8        u1CloudState\n"
"uint8        u1Day\n"
"uint8        u1Month\n"
"================================================================================\n"
"MSG: RosAdapter/traffic_light\n"
"# /** ------ 交通灯信息 ------ */\n"
"int32                    u4Id\n"
"int32                    u4CtrlId\n"
"uint32                   u4NoPhases\n"
"uint32                   u4DataSize\n"
"float32                  u4State\n"
"float32                  u4CycleTime\n"
"traffic_light_phase[]    phases\n"
"================================================================================\n"
"MSG: RosAdapter/traffic_light_phase\n"
"# /** ------ 交通灯相位信息 ------ */\n"
"\n"
"float32     u4Duration\n"
"uint8       u1Status   \n"
"================================================================================\n"
"MSG: RosAdapter/road_query\n"
"# /** ------ 查询道路点 ------ */\n"
"float32 u8X\n"
"float32 u8Y\n"
"uint16  u2Id\n"
"================================================================================\n"
"MSG: RosAdapter/mil_ego_state\n"
"# /** ------ MIL测试主车信息描述包 ------ */\n"
"\n"
"object_state   sObjectState\n"
"float64        u4initSpeed\n"
"float64        u8DistRoadEnd\n"
"uint32         u4LightMask               \n"
"float32        u4WheelSpeedFL\n"
"float32        u4WheelSpeedFR\n"
"float32        u4WheelSpeedRL\n"
"float32        u4WheelSpeedRR\n"
"float32        u4MasterCylinderPressure\n"
"float32        u4WheelHeightLF\n"
"float32        u4WheelHeightLR\n"
"float32        u4WheelHeightRF\n"
"float32        u4WheelHeightRR\n"
"float32        u4SteerAngle\n"
"uint8          u1objQuantity\n"
"uint8          u1irc_id\n"
"uint8          u1irc_left_id\n"
"uint8          u1irc_right_id\n"
"uint8          u1cipv_id\n"
"uint8          u1lmc_id\n"
"uint8          u1rmc_id\n"
"uint8          u1isReachInitSpeed\n"
"================================================================================\n"
"MSG: RosAdapter/object_state\n"
"# /** ------ 对象信息 ------ */\n"
"coord           sSpeed\n"
"coord           sAccel\n"
"geometry        sGeo\n"
"coord           sPos\n"
"string          au1Name\n"
"string          au1ModelFileName\n"
"string          au1ModelName\n"
"float64[]       au8ParamScale\n"
"uint64          u8RoadId\n"
"float64         u8SpeedLimit\n"
"uint32          u4Id\n"
"float32         u4RoadS\n"
"float32         u4RoadT\n"
"float32         u4HdgRel\n"
"float32         u4LaneOffset\n"
"float32         u4TraveledDist\n"
"uint16          u2visMask\n"
"uint8           u1Type\n"
"int8            u1LaneId\n"
"uint8           u1Dir\n"
"bool            u1IsOnRoad\n"
"uint8           u1category\n"
"================================================================================\n"
"MSG: RosAdapter/geometry\n"
"# /** ------ 几何信息 ------ */\n"
"float32 u4DimX\n"
"float32 u4DimY\n"
"float32 u4DimZ\n"
"float32 u4OffX\n"
"float32 u4OffY\n"
"float32 u4OffZ\n"
"================================================================================\n"
"MSG: RosAdapter/mil_object_state\n"
"# /** ------ MIL测试环境车、行人、障碍物信息 ------ */\n"
"object_state           sObjectState\n"
"mil_object_state_base  sMilBase\n"
"================================================================================\n"
"MSG: RosAdapter/mil_object_state_base\n"
"#/** ------ MIL测试环境车、行人、障碍物信息描述包 ------ */\n"
"\n"
"uint32     u4LightMask\n"
"float32    u4DistanceX\n"
"float32    u4DistanceY\n"
"float32    u4VelocityX\n"
"float32    u4VelocityY\n"
"float32    u4AccelerationX\n"
"float32    u4AccelerationY\n"
"float32    u4YawRate\n"
"float32    u4Dist\n"
"float32    u4Angle\n"
"uint8      u1ObjClass\n"
"uint8      u1Flag_detected\n"
"uint8      u1Movable\n"
"uint8      u1Moving\n"
"uint8      u1Obj_Age\n"
"================================================================================\n"
"MSG: RosAdapter/mil_roadmark\n"
" # /** ------ MIL测试车道线信息描述包 ------ */\n"
"\n"
"uint64  u8RoadId\n"
"float64 curvVert\n"
"float32 u4StartDx\n"
"float32 u4Width\n"
"float32 u4ViewRangeStart\n"
"float32 u4ViewRangeEnd\n"
"float32 u4MeasuredVREnd\n"
"float32 u4C0\n"
"float32 u4C1\n"
"float32 u4C2\n"
"float32 u4C3\n"
"uint16  u2LaneChange\n"
"int8    u1LaneId\n"
"uint8   u1Quality\n"
"uint8   u1Type\n"
"uint8   u1Color\n"
"uint8   u1LeftCrossing\n"
"uint8   u1RightCrossing\n"
"================================================================================\n"
"MSG: RosAdapter/init_param\n"
"# /** ------ 初始化参数 ------ */\n"
"\n"
"string             au1OpenScenario\n"
"string             au1OpenDrive\n"
"uint64             u8StartRoadId\n"
"uint64             u8EndRoadId\n"
"float32            u4StartRoadS\n"
"float32            u4EndRoadS\n"
"float32            u4Speed\n"
"uint16             u2ScenarioId\n"
"int8               u1StartLaneId\n"
"int8               u1EndLaneId\n"
"================================================================================\n"
"MSG: RosAdapter/mil_amesim_signal\n"
"# /** ------ MIL AMESim 测试信息描述包 ------ */\n"
"\n"
"float32       u4LeftLen\n"
"float32       u4NextLen\n"
"float32       u4NextAgeSpeed\n"
"float32       u4NextMinSpeed\n"
"float32       u4NextMaxSpeed\n"
"float32       u4NextGradient\n"
"float32       u4NextCongest\n"
"uint8         u1RoadType\n"
"float32       u4DisLimit\n"
"bool          u1IsFarAwayLimit\n"
"float32       u4LimitSpeed\n"
"bool          ulIsJunction\n"
"float32       u4DisJunction\n"
"bool          ulIsFarAwayJunc\n"
"uint8         ultrafficLightStat\n"
"float32       u4Curvity\n"
"float32       u4RelativeVel\n"
"float32       u4RelativeDis\n"
"================================================================================\n"
"MSG: RosAdapter/activate_controller\n"
"# /** ------激活控制器 ------ */\n"
"\n"
"uint32          u4ObjectId\n"
"bool            u1Lateral\n"
"bool            u1Longitudinal\n"
"================================================================================\n"
"MSG: RosAdapter/assign_controller\n"
"# /** ------分配控制器 ------ */\n"
"\n"
"string                               au1ControllerName\n"
"uint32                               u4ObjectId\n"
"uint32                               u4PropertyNum\n"
"assign_controller_property[]         properties\n"
"================================================================================\n"
"MSG: RosAdapter/assign_controller_property\n"
"# /** ------分配控制器的属性信息 ------ */\n"
"\n"
"string   au1Name\n"
"string   au1Value\n"
"================================================================================\n"
"MSG: RosAdapter/override_controller\n"
"# /** ------接管控制器 ------ */\n"
"\n"
"float64   u8ThrottleValue\n"
"float64   u8BrakeValue\n"
"float64   u8SteeringWheelValue\n"
"float64   u8ParkingBrakeValue\n"
"float64   u8ClutchValue\n"
"float64   u8GearValue\n"
"uint32    u4ObjectId\n"
"bool      u1ThrottleActive\n"
"bool      u1BrakeActive\n"
"bool      u1SteeringWheelActive\n"
"bool      u1ParkingBrakeActive\n"
"bool      u1ClutchActive\n"
"bool      u1GearActive\n"
"================================================================================\n"
"MSG: RosAdapter/custom_command\n"
"# /** ------自定义指令 ------ */\n"
"\n"
"string   au1Type\n"
"string   au1Command\n"
"uint32   u4ObjectId\n"
"================================================================================\n"
"MSG: RosAdapter/parkingSpace\n"
"#/** ------ 停车位信息 ------ */\n"
"geometry  sGeo\n"
"coord     sPos\n"
"float32   u4RoadS\n"
"float32   u4RoadT\n"
"uint64    u8SlotId\n"
"\n"
"================================================================================\n"
"MSG: RosAdapter/driver_ctrl\n"
"# /** ------ 驾驶员控制输入的信息 ------ */\n"
"\n"
"uint32       u4ObjectId\n"
"float32      u4MtWheel\n"
"float64      u8MasterCylinderPressure\n"
"float64      u8SteeringWheel\n"
"float64      u8ThrottlePedal\n"
"float64      u8BrakePedal\n"
"float64      u8AccelTgt\n"
"float64      u8SteeringTorque\n"
"float64      u8StopDistance\n"
"float64      u8TargetSpeed\n"
"float64      u8Vx\n"
"float64      u8Wr\n"
"float64      u8VLFWheelSpd\n"
"float64      u8VRFWheelSpd\n"
"float64      u8VLRWheelSpd\n"
"float64      u8VRRWheelSpd\n"
"float64      u8Ax\n"
"float64      u8Ay\n"
"float64      u8SteeringWheelAngularRate\n"
"float64      u8DrvTorqAct\n"
"float64      u8Xmc\n"
"float64      u8Ymc\n"
"float64      u8YawThetaVehicle\n"
"float64      u8PitchThetaVehicle\n"
"float64      u8RollThetaVehicle\n"
"float64      u8PitchRateVehicle\n"
"float64      u8RollRateVehicle\n"
"float64      u8SinSlopeout\n"
"float64      u8VehicleCurv\n"
"float64      u8TmotorCmd\n"
"float64      u8Tmotor\n"
"float64      u8EnergySourceLevel\n"
"float64      u8WLFWheelSpd\n"
"float64      u8WRFWheelSpd\n"
"float64      u8WLRWheelSpd\n"
"float64      u8WRRWheelSpd\n"
"float64      u8WGearSpd\n"
"uint8        u1LFWheelRotatedDir\n"
"uint8        u1LRWheelRotatedDir\n"
"uint8        u1RFWheelRotatedDir\n"
"uint8        u1RRWheelRotatedDir\n"
"uint8        u1BrakePedalStatus\n"
"uint8        u1VehicleDir\n"
"uint8        u1BrkType\n"
"int8         u1Gear \n"
"================================================================================\n"
"MSG: RosAdapter/sync\n"
"# /** ------ 同步信号 ------ */\n"
"uint32 u4CmdMask\n"
"uint32 u4UserData\n"
"================================================================================\n"
"MSG: RosAdapter/imu_data\n"
"uint8         msgcnt\n"
"float64       u8X\n"
"float64       u8Y\n"
"float64       u8Z\n"
"float64       yaw\n"
"float64       pitch\n"
"float64       roll\n"
"================================================================================\n"
"MSG: RosAdapter/gnss_gga\n"
"uint8         startChar\n"
"uint8[]       cmd\n"
"uint8[]       mTime\n"
"float64       lat\n"
"uint8         NorS\n"
"float64       lon\n"
"uint8         EorW\n"
"uint8[]       mode\n"
"int32         count\n"
"float64       horizonprecious \n"
"float64       geoidalheight\n"
"uint8         meter1\n"
"float64       height\n"
"uint8         meter2\n"
"float64       dataage\n"
"int32         basestationflag\n"
"uint8         sperator\n"
"uint8[]       checksum\n"
"================================================================================\n"
"MSG: RosAdapter/uwb_data\n"
"uint8         msgcnt\n"
"float64       u8x\n"
"float64       u8y\n"
"float64       u8z\n"
"================================================================================\n"
"MSG: RosAdapter/model_outline\n"
"string                au1ModelName\n"
"double_array[]        au8OutlinePoints    \n"
"================================================================================\n"
"MSG: RosAdapter/double_array\n"
"float64[]  data\n"
"================================================================================\n"
"MSG: RosAdapter/rsu_vnfp_info\n"
"uint32    type\n"
;
  }

  static const char* value(const ::RosAdapter::rosSimproToAD_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::rosSimproToAD_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.head);
      stream.next(m.laneInfos);
      stream.next(m.sensorStates);
      stream.next(m.sensorObjects);
      stream.next(m.contactPoints);
      stream.next(m.trafficSigns);
      stream.next(m.roadStates);
      stream.next(m.environments);
      stream.next(m.trafficLights);
      stream.next(m.roadQueries);
      stream.next(m.egoStates);
      stream.next(m.milObjStates);
      stream.next(m.milRoadMarks);
      stream.next(m.initParams);
      stream.next(m.milAmesimSignals);
      stream.next(m.activateControllers);
      stream.next(m.assignControllers);
      stream.next(m.overrideControllers);
      stream.next(m.customCommands);
      stream.next(m.parkingSpaces);
      stream.next(m.driverCtrls);
      stream.next(m.syncs);
      stream.next(m.imuDatas);
      stream.next(m.gnssGgaS);
      stream.next(m.uwbDatas);
      stream.next(m.modelOutlines);
      stream.next(m.rsuVnfpInfo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rosSimproToAD_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::rosSimproToAD_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::rosSimproToAD_<ContainerAllocator>& v)
  {
    s << indent << "head: ";
    s << std::endl;
    Printer< ::RosAdapter::header_<ContainerAllocator> >::stream(s, indent + "  ", v.head);
    s << indent << "laneInfos[]" << std::endl;
    for (size_t i = 0; i < v.laneInfos.size(); ++i)
    {
      s << indent << "  laneInfos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::lane_info_<ContainerAllocator> >::stream(s, indent + "    ", v.laneInfos[i]);
    }
    s << indent << "sensorStates[]" << std::endl;
    for (size_t i = 0; i < v.sensorStates.size(); ++i)
    {
      s << indent << "  sensorStates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::sensor_info_<ContainerAllocator> >::stream(s, indent + "    ", v.sensorStates[i]);
    }
    s << indent << "sensorObjects[]" << std::endl;
    for (size_t i = 0; i < v.sensorObjects.size(); ++i)
    {
      s << indent << "  sensorObjects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::sensor_detection_info_<ContainerAllocator> >::stream(s, indent + "    ", v.sensorObjects[i]);
    }
    s << indent << "contactPoints[]" << std::endl;
    for (size_t i = 0; i < v.contactPoints.size(); ++i)
    {
      s << indent << "  contactPoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::contact_point_<ContainerAllocator> >::stream(s, indent + "    ", v.contactPoints[i]);
    }
    s << indent << "trafficSigns[]" << std::endl;
    for (size_t i = 0; i < v.trafficSigns.size(); ++i)
    {
      s << indent << "  trafficSigns[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::traffic_sign_<ContainerAllocator> >::stream(s, indent + "    ", v.trafficSigns[i]);
    }
    s << indent << "roadStates[]" << std::endl;
    for (size_t i = 0; i < v.roadStates.size(); ++i)
    {
      s << indent << "  roadStates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::road_state_<ContainerAllocator> >::stream(s, indent + "    ", v.roadStates[i]);
    }
    s << indent << "environments[]" << std::endl;
    for (size_t i = 0; i < v.environments.size(); ++i)
    {
      s << indent << "  environments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::environment_<ContainerAllocator> >::stream(s, indent + "    ", v.environments[i]);
    }
    s << indent << "trafficLights[]" << std::endl;
    for (size_t i = 0; i < v.trafficLights.size(); ++i)
    {
      s << indent << "  trafficLights[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::traffic_light_<ContainerAllocator> >::stream(s, indent + "    ", v.trafficLights[i]);
    }
    s << indent << "roadQueries[]" << std::endl;
    for (size_t i = 0; i < v.roadQueries.size(); ++i)
    {
      s << indent << "  roadQueries[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::road_query_<ContainerAllocator> >::stream(s, indent + "    ", v.roadQueries[i]);
    }
    s << indent << "egoStates[]" << std::endl;
    for (size_t i = 0; i < v.egoStates.size(); ++i)
    {
      s << indent << "  egoStates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::mil_ego_state_<ContainerAllocator> >::stream(s, indent + "    ", v.egoStates[i]);
    }
    s << indent << "milObjStates[]" << std::endl;
    for (size_t i = 0; i < v.milObjStates.size(); ++i)
    {
      s << indent << "  milObjStates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::mil_object_state_<ContainerAllocator> >::stream(s, indent + "    ", v.milObjStates[i]);
    }
    s << indent << "milRoadMarks[]" << std::endl;
    for (size_t i = 0; i < v.milRoadMarks.size(); ++i)
    {
      s << indent << "  milRoadMarks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::mil_roadmark_<ContainerAllocator> >::stream(s, indent + "    ", v.milRoadMarks[i]);
    }
    s << indent << "initParams[]" << std::endl;
    for (size_t i = 0; i < v.initParams.size(); ++i)
    {
      s << indent << "  initParams[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::init_param_<ContainerAllocator> >::stream(s, indent + "    ", v.initParams[i]);
    }
    s << indent << "milAmesimSignals[]" << std::endl;
    for (size_t i = 0; i < v.milAmesimSignals.size(); ++i)
    {
      s << indent << "  milAmesimSignals[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::mil_amesim_signal_<ContainerAllocator> >::stream(s, indent + "    ", v.milAmesimSignals[i]);
    }
    s << indent << "activateControllers[]" << std::endl;
    for (size_t i = 0; i < v.activateControllers.size(); ++i)
    {
      s << indent << "  activateControllers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::activate_controller_<ContainerAllocator> >::stream(s, indent + "    ", v.activateControllers[i]);
    }
    s << indent << "assignControllers[]" << std::endl;
    for (size_t i = 0; i < v.assignControllers.size(); ++i)
    {
      s << indent << "  assignControllers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::assign_controller_<ContainerAllocator> >::stream(s, indent + "    ", v.assignControllers[i]);
    }
    s << indent << "overrideControllers[]" << std::endl;
    for (size_t i = 0; i < v.overrideControllers.size(); ++i)
    {
      s << indent << "  overrideControllers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::override_controller_<ContainerAllocator> >::stream(s, indent + "    ", v.overrideControllers[i]);
    }
    s << indent << "customCommands[]" << std::endl;
    for (size_t i = 0; i < v.customCommands.size(); ++i)
    {
      s << indent << "  customCommands[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::custom_command_<ContainerAllocator> >::stream(s, indent + "    ", v.customCommands[i]);
    }
    s << indent << "parkingSpaces[]" << std::endl;
    for (size_t i = 0; i < v.parkingSpaces.size(); ++i)
    {
      s << indent << "  parkingSpaces[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::parkingSpace_<ContainerAllocator> >::stream(s, indent + "    ", v.parkingSpaces[i]);
    }
    s << indent << "driverCtrls[]" << std::endl;
    for (size_t i = 0; i < v.driverCtrls.size(); ++i)
    {
      s << indent << "  driverCtrls[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::driver_ctrl_<ContainerAllocator> >::stream(s, indent + "    ", v.driverCtrls[i]);
    }
    s << indent << "syncs[]" << std::endl;
    for (size_t i = 0; i < v.syncs.size(); ++i)
    {
      s << indent << "  syncs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::sync_<ContainerAllocator> >::stream(s, indent + "    ", v.syncs[i]);
    }
    s << indent << "imuDatas[]" << std::endl;
    for (size_t i = 0; i < v.imuDatas.size(); ++i)
    {
      s << indent << "  imuDatas[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::imu_data_<ContainerAllocator> >::stream(s, indent + "    ", v.imuDatas[i]);
    }
    s << indent << "gnssGgaS[]" << std::endl;
    for (size_t i = 0; i < v.gnssGgaS.size(); ++i)
    {
      s << indent << "  gnssGgaS[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::gnss_gga_<ContainerAllocator> >::stream(s, indent + "    ", v.gnssGgaS[i]);
    }
    s << indent << "uwbDatas[]" << std::endl;
    for (size_t i = 0; i < v.uwbDatas.size(); ++i)
    {
      s << indent << "  uwbDatas[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::uwb_data_<ContainerAllocator> >::stream(s, indent + "    ", v.uwbDatas[i]);
    }
    s << indent << "modelOutlines[]" << std::endl;
    for (size_t i = 0; i < v.modelOutlines.size(); ++i)
    {
      s << indent << "  modelOutlines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::RosAdapter::model_outline_<ContainerAllocator> >::stream(s, indent + "    ", v.modelOutlines[i]);
    }
    s << indent << "rsuVnfpInfo: ";
    s << std::endl;
    Printer< ::RosAdapter::rsu_vnfp_info_<ContainerAllocator> >::stream(s, indent + "  ", v.rsuVnfpInfo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_ROSSIMPROTOAD_H
