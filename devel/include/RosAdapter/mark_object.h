// Generated by gencpp from file RosAdapter/mark_object.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_MARK_OBJECT_H
#define ROSADAPTER_MESSAGE_MARK_OBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct mark_object_
{
  typedef mark_object_<ContainerAllocator> Type;

  mark_object_()
    : au8RoadMarkCoeffL()
    , au8RoadMarkCoeffR()  {
    }
  mark_object_(const ContainerAllocator& _alloc)
    : au8RoadMarkCoeffL(_alloc)
    , au8RoadMarkCoeffR(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _au8RoadMarkCoeffL_type;
  _au8RoadMarkCoeffL_type au8RoadMarkCoeffL;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _au8RoadMarkCoeffR_type;
  _au8RoadMarkCoeffR_type au8RoadMarkCoeffR;





  typedef boost::shared_ptr< ::RosAdapter::mark_object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::mark_object_<ContainerAllocator> const> ConstPtr;

}; // struct mark_object_

typedef ::RosAdapter::mark_object_<std::allocator<void> > mark_object;

typedef boost::shared_ptr< ::RosAdapter::mark_object > mark_objectPtr;
typedef boost::shared_ptr< ::RosAdapter::mark_object const> mark_objectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::mark_object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::mark_object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::mark_object_<ContainerAllocator1> & lhs, const ::RosAdapter::mark_object_<ContainerAllocator2> & rhs)
{
  return lhs.au8RoadMarkCoeffL == rhs.au8RoadMarkCoeffL &&
    lhs.au8RoadMarkCoeffR == rhs.au8RoadMarkCoeffR;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::mark_object_<ContainerAllocator1> & lhs, const ::RosAdapter::mark_object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::mark_object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::mark_object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::mark_object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::mark_object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::mark_object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::mark_object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::mark_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e24fb0ae50c06f023e6ce66991b164da";
  }

  static const char* value(const ::RosAdapter::mark_object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe24fb0ae50c06f02ULL;
  static const uint64_t static_value2 = 0x3e6ce66991b164daULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::mark_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/mark_object";
  }

  static const char* value(const ::RosAdapter::mark_object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::mark_object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 车道线\n"
"\n"
"float64[]	 au8RoadMarkCoeffL\n"
"float64[]	 au8RoadMarkCoeffR\n"
;
  }

  static const char* value(const ::RosAdapter::mark_object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::mark_object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.au8RoadMarkCoeffL);
      stream.next(m.au8RoadMarkCoeffR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mark_object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::mark_object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::mark_object_<ContainerAllocator>& v)
  {
    s << indent << "au8RoadMarkCoeffL[]" << std::endl;
    for (size_t i = 0; i < v.au8RoadMarkCoeffL.size(); ++i)
    {
      s << indent << "  au8RoadMarkCoeffL[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.au8RoadMarkCoeffL[i]);
    }
    s << indent << "au8RoadMarkCoeffR[]" << std::endl;
    for (size_t i = 0; i < v.au8RoadMarkCoeffR.size(); ++i)
    {
      s << indent << "  au8RoadMarkCoeffR[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.au8RoadMarkCoeffR[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_MARK_OBJECT_H
