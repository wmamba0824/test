// Generated by gencpp from file RosAdapter/gnss_gga.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_GNSS_GGA_H
#define ROSADAPTER_MESSAGE_GNSS_GGA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct gnss_gga_
{
  typedef gnss_gga_<ContainerAllocator> Type;

  gnss_gga_()
    : startChar(0)
    , cmd()
    , mTime()
    , lat(0.0)
    , NorS(0)
    , lon(0.0)
    , EorW(0)
    , mode()
    , count(0)
    , horizonprecious(0.0)
    , geoidalheight(0.0)
    , meter1(0)
    , height(0.0)
    , meter2(0)
    , dataage(0.0)
    , basestationflag(0)
    , sperator(0)
    , checksum()  {
    }
  gnss_gga_(const ContainerAllocator& _alloc)
    : startChar(0)
    , cmd(_alloc)
    , mTime(_alloc)
    , lat(0.0)
    , NorS(0)
    , lon(0.0)
    , EorW(0)
    , mode(_alloc)
    , count(0)
    , horizonprecious(0.0)
    , geoidalheight(0.0)
    , meter1(0)
    , height(0.0)
    , meter2(0)
    , dataage(0.0)
    , basestationflag(0)
    , sperator(0)
    , checksum(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _startChar_type;
  _startChar_type startChar;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _cmd_type;
  _cmd_type cmd;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _mTime_type;
  _mTime_type mTime;

   typedef double _lat_type;
  _lat_type lat;

   typedef uint8_t _NorS_type;
  _NorS_type NorS;

   typedef double _lon_type;
  _lon_type lon;

   typedef uint8_t _EorW_type;
  _EorW_type EorW;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _mode_type;
  _mode_type mode;

   typedef int32_t _count_type;
  _count_type count;

   typedef double _horizonprecious_type;
  _horizonprecious_type horizonprecious;

   typedef double _geoidalheight_type;
  _geoidalheight_type geoidalheight;

   typedef uint8_t _meter1_type;
  _meter1_type meter1;

   typedef double _height_type;
  _height_type height;

   typedef uint8_t _meter2_type;
  _meter2_type meter2;

   typedef double _dataage_type;
  _dataage_type dataage;

   typedef int32_t _basestationflag_type;
  _basestationflag_type basestationflag;

   typedef uint8_t _sperator_type;
  _sperator_type sperator;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _checksum_type;
  _checksum_type checksum;





  typedef boost::shared_ptr< ::RosAdapter::gnss_gga_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::gnss_gga_<ContainerAllocator> const> ConstPtr;

}; // struct gnss_gga_

typedef ::RosAdapter::gnss_gga_<std::allocator<void> > gnss_gga;

typedef boost::shared_ptr< ::RosAdapter::gnss_gga > gnss_ggaPtr;
typedef boost::shared_ptr< ::RosAdapter::gnss_gga const> gnss_ggaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::gnss_gga_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::gnss_gga_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::gnss_gga_<ContainerAllocator1> & lhs, const ::RosAdapter::gnss_gga_<ContainerAllocator2> & rhs)
{
  return lhs.startChar == rhs.startChar &&
    lhs.cmd == rhs.cmd &&
    lhs.mTime == rhs.mTime &&
    lhs.lat == rhs.lat &&
    lhs.NorS == rhs.NorS &&
    lhs.lon == rhs.lon &&
    lhs.EorW == rhs.EorW &&
    lhs.mode == rhs.mode &&
    lhs.count == rhs.count &&
    lhs.horizonprecious == rhs.horizonprecious &&
    lhs.geoidalheight == rhs.geoidalheight &&
    lhs.meter1 == rhs.meter1 &&
    lhs.height == rhs.height &&
    lhs.meter2 == rhs.meter2 &&
    lhs.dataage == rhs.dataage &&
    lhs.basestationflag == rhs.basestationflag &&
    lhs.sperator == rhs.sperator &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::gnss_gga_<ContainerAllocator1> & lhs, const ::RosAdapter::gnss_gga_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::gnss_gga_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::gnss_gga_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::gnss_gga_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::gnss_gga_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::gnss_gga_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::gnss_gga_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::gnss_gga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f522481e07bd152c1ddc9897d588fb8";
  }

  static const char* value(const ::RosAdapter::gnss_gga_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f522481e07bd152ULL;
  static const uint64_t static_value2 = 0xc1ddc9897d588fb8ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::gnss_gga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/gnss_gga";
  }

  static const char* value(const ::RosAdapter::gnss_gga_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::gnss_gga_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8         startChar\n"
"uint8[]       cmd\n"
"uint8[]       mTime\n"
"float64       lat\n"
"uint8         NorS\n"
"float64       lon\n"
"uint8         EorW\n"
"uint8[]       mode\n"
"int32         count\n"
"float64       horizonprecious \n"
"float64       geoidalheight\n"
"uint8         meter1\n"
"float64       height\n"
"uint8         meter2\n"
"float64       dataage\n"
"int32         basestationflag\n"
"uint8         sperator\n"
"uint8[]       checksum\n"
;
  }

  static const char* value(const ::RosAdapter::gnss_gga_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::gnss_gga_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.startChar);
      stream.next(m.cmd);
      stream.next(m.mTime);
      stream.next(m.lat);
      stream.next(m.NorS);
      stream.next(m.lon);
      stream.next(m.EorW);
      stream.next(m.mode);
      stream.next(m.count);
      stream.next(m.horizonprecious);
      stream.next(m.geoidalheight);
      stream.next(m.meter1);
      stream.next(m.height);
      stream.next(m.meter2);
      stream.next(m.dataage);
      stream.next(m.basestationflag);
      stream.next(m.sperator);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gnss_gga_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::gnss_gga_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::gnss_gga_<ContainerAllocator>& v)
  {
    s << indent << "startChar: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.startChar);
    s << indent << "cmd[]" << std::endl;
    for (size_t i = 0; i < v.cmd.size(); ++i)
    {
      s << indent << "  cmd[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cmd[i]);
    }
    s << indent << "mTime[]" << std::endl;
    for (size_t i = 0; i < v.mTime.size(); ++i)
    {
      s << indent << "  mTime[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.mTime[i]);
    }
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "NorS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.NorS);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "EorW: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EorW);
    s << indent << "mode[]" << std::endl;
    for (size_t i = 0; i < v.mode.size(); ++i)
    {
      s << indent << "  mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.mode[i]);
    }
    s << indent << "count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.count);
    s << indent << "horizonprecious: ";
    Printer<double>::stream(s, indent + "  ", v.horizonprecious);
    s << indent << "geoidalheight: ";
    Printer<double>::stream(s, indent + "  ", v.geoidalheight);
    s << indent << "meter1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.meter1);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "meter2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.meter2);
    s << indent << "dataage: ";
    Printer<double>::stream(s, indent + "  ", v.dataage);
    s << indent << "basestationflag: ";
    Printer<int32_t>::stream(s, indent + "  ", v.basestationflag);
    s << indent << "sperator: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sperator);
    s << indent << "checksum[]" << std::endl;
    for (size_t i = 0; i < v.checksum.size(); ++i)
    {
      s << indent << "  checksum[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.checksum[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_GNSS_GGA_H
