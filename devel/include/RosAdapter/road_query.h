// Generated by gencpp from file RosAdapter/road_query.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_ROAD_QUERY_H
#define ROSADAPTER_MESSAGE_ROAD_QUERY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct road_query_
{
  typedef road_query_<ContainerAllocator> Type;

  road_query_()
    : u8X(0.0)
    , u8Y(0.0)
    , u2Id(0)  {
    }
  road_query_(const ContainerAllocator& _alloc)
    : u8X(0.0)
    , u8Y(0.0)
    , u2Id(0)  {
  (void)_alloc;
    }



   typedef float _u8X_type;
  _u8X_type u8X;

   typedef float _u8Y_type;
  _u8Y_type u8Y;

   typedef uint16_t _u2Id_type;
  _u2Id_type u2Id;





  typedef boost::shared_ptr< ::RosAdapter::road_query_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::road_query_<ContainerAllocator> const> ConstPtr;

}; // struct road_query_

typedef ::RosAdapter::road_query_<std::allocator<void> > road_query;

typedef boost::shared_ptr< ::RosAdapter::road_query > road_queryPtr;
typedef boost::shared_ptr< ::RosAdapter::road_query const> road_queryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::road_query_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::road_query_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::road_query_<ContainerAllocator1> & lhs, const ::RosAdapter::road_query_<ContainerAllocator2> & rhs)
{
  return lhs.u8X == rhs.u8X &&
    lhs.u8Y == rhs.u8Y &&
    lhs.u2Id == rhs.u2Id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::road_query_<ContainerAllocator1> & lhs, const ::RosAdapter::road_query_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::road_query_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::road_query_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::road_query_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::road_query_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::road_query_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::road_query_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::road_query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "197c272ebc790a868b90d572669363c5";
  }

  static const char* value(const ::RosAdapter::road_query_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x197c272ebc790a86ULL;
  static const uint64_t static_value2 = 0x8b90d572669363c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::road_query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/road_query";
  }

  static const char* value(const ::RosAdapter::road_query_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::road_query_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------ 查询道路点 ------ */\n"
"float32 u8X\n"
"float32 u8Y\n"
"uint16  u2Id\n"
;
  }

  static const char* value(const ::RosAdapter::road_query_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::road_query_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u8X);
      stream.next(m.u8Y);
      stream.next(m.u2Id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct road_query_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::road_query_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::road_query_<ContainerAllocator>& v)
  {
    s << indent << "u8X: ";
    Printer<float>::stream(s, indent + "  ", v.u8X);
    s << indent << "u8Y: ";
    Printer<float>::stream(s, indent + "  ", v.u8Y);
    s << indent << "u2Id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u2Id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_ROAD_QUERY_H
