// Generated by gencpp from file RosAdapter/ad_signal_data.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_AD_SIGNAL_DATA_H
#define ROSADAPTER_MESSAGE_AD_SIGNAL_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct ad_signal_data_
{
  typedef ad_signal_data_<ContainerAllocator> Type;

  ad_signal_data_()
    : au1SignalName()
    , u8SignalValue(0.0)  {
    }
  ad_signal_data_(const ContainerAllocator& _alloc)
    : au1SignalName(_alloc)
    , u8SignalValue(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _au1SignalName_type;
  _au1SignalName_type au1SignalName;

   typedef double _u8SignalValue_type;
  _u8SignalValue_type u8SignalValue;





  typedef boost::shared_ptr< ::RosAdapter::ad_signal_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::ad_signal_data_<ContainerAllocator> const> ConstPtr;

}; // struct ad_signal_data_

typedef ::RosAdapter::ad_signal_data_<std::allocator<void> > ad_signal_data;

typedef boost::shared_ptr< ::RosAdapter::ad_signal_data > ad_signal_dataPtr;
typedef boost::shared_ptr< ::RosAdapter::ad_signal_data const> ad_signal_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::ad_signal_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::ad_signal_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::ad_signal_data_<ContainerAllocator1> & lhs, const ::RosAdapter::ad_signal_data_<ContainerAllocator2> & rhs)
{
  return lhs.au1SignalName == rhs.au1SignalName &&
    lhs.u8SignalValue == rhs.u8SignalValue;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::ad_signal_data_<ContainerAllocator1> & lhs, const ::RosAdapter::ad_signal_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::ad_signal_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::ad_signal_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::ad_signal_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::ad_signal_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::ad_signal_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::ad_signal_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::ad_signal_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ff39b1451a3fcf44b37435ff12fa37b";
  }

  static const char* value(const ::RosAdapter::ad_signal_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ff39b1451a3fcf4ULL;
  static const uint64_t static_value2 = 0x4b37435ff12fa37bULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::ad_signal_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/ad_signal_data";
  }

  static const char* value(const ::RosAdapter::ad_signal_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::ad_signal_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string      au1SignalName\n"
"float64     u8SignalValue\n"
;
  }

  static const char* value(const ::RosAdapter::ad_signal_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::ad_signal_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.au1SignalName);
      stream.next(m.u8SignalValue);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ad_signal_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::ad_signal_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::ad_signal_data_<ContainerAllocator>& v)
  {
    s << indent << "au1SignalName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.au1SignalName);
    s << indent << "u8SignalValue: ";
    Printer<double>::stream(s, indent + "  ", v.u8SignalValue);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_AD_SIGNAL_DATA_H
