// Generated by gencpp from file RosAdapter/v2x_warninginformation.msg
// DO NOT EDIT!


#ifndef ROSADAPTER_MESSAGE_V2X_WARNINGINFORMATION_H
#define ROSADAPTER_MESSAGE_V2X_WARNINGINFORMATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RosAdapter
{
template <class ContainerAllocator>
struct v2x_warninginformation_
{
  typedef v2x_warninginformation_<ContainerAllocator> Type;

  v2x_warninginformation_()
    : u4Type(0)  {
    }
  v2x_warninginformation_(const ContainerAllocator& _alloc)
    : u4Type(0)  {
  (void)_alloc;
    }



   typedef uint32_t _u4Type_type;
  _u4Type_type u4Type;





  typedef boost::shared_ptr< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> const> ConstPtr;

}; // struct v2x_warninginformation_

typedef ::RosAdapter::v2x_warninginformation_<std::allocator<void> > v2x_warninginformation;

typedef boost::shared_ptr< ::RosAdapter::v2x_warninginformation > v2x_warninginformationPtr;
typedef boost::shared_ptr< ::RosAdapter::v2x_warninginformation const> v2x_warninginformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosAdapter::v2x_warninginformation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RosAdapter::v2x_warninginformation_<ContainerAllocator1> & lhs, const ::RosAdapter::v2x_warninginformation_<ContainerAllocator2> & rhs)
{
  return lhs.u4Type == rhs.u4Type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RosAdapter::v2x_warninginformation_<ContainerAllocator1> & lhs, const ::RosAdapter::v2x_warninginformation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RosAdapter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0ebee8563c45127e3636d2e914f1c30";
  }

  static const char* value(const ::RosAdapter::v2x_warninginformation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0ebee8563c45127ULL;
  static const uint64_t static_value2 = 0xe3636d2e914f1c30ULL;
};

template<class ContainerAllocator>
struct DataType< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosAdapter/v2x_warninginformation";
  }

  static const char* value(const ::RosAdapter::v2x_warninginformation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# /** ------ V2X 告警信息 ------ */\n"
"\n"
"uint32 u4Type\n"
;
  }

  static const char* value(const ::RosAdapter::v2x_warninginformation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u4Type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct v2x_warninginformation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosAdapter::v2x_warninginformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosAdapter::v2x_warninginformation_<ContainerAllocator>& v)
  {
    s << indent << "u4Type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.u4Type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSADAPTER_MESSAGE_V2X_WARNINGINFORMATION_H
