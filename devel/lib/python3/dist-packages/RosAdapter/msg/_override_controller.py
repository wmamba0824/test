# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/override_controller.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class override_controller(genpy.Message):
  _md5sum = "8ea5a19cb588ee701c9b5157e9aab0b5"
  _type = "RosAdapter/override_controller"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# /** ------接管控制器 ------ */

float64   u8ThrottleValue
float64   u8BrakeValue
float64   u8SteeringWheelValue
float64   u8ParkingBrakeValue
float64   u8ClutchValue
float64   u8GearValue
uint32    u4ObjectId
bool      u1ThrottleActive
bool      u1BrakeActive
bool      u1SteeringWheelActive
bool      u1ParkingBrakeActive
bool      u1ClutchActive
bool      u1GearActive"""
  __slots__ = ['u8ThrottleValue','u8BrakeValue','u8SteeringWheelValue','u8ParkingBrakeValue','u8ClutchValue','u8GearValue','u4ObjectId','u1ThrottleActive','u1BrakeActive','u1SteeringWheelActive','u1ParkingBrakeActive','u1ClutchActive','u1GearActive']
  _slot_types = ['float64','float64','float64','float64','float64','float64','uint32','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       u8ThrottleValue,u8BrakeValue,u8SteeringWheelValue,u8ParkingBrakeValue,u8ClutchValue,u8GearValue,u4ObjectId,u1ThrottleActive,u1BrakeActive,u1SteeringWheelActive,u1ParkingBrakeActive,u1ClutchActive,u1GearActive

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(override_controller, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.u8ThrottleValue is None:
        self.u8ThrottleValue = 0.
      if self.u8BrakeValue is None:
        self.u8BrakeValue = 0.
      if self.u8SteeringWheelValue is None:
        self.u8SteeringWheelValue = 0.
      if self.u8ParkingBrakeValue is None:
        self.u8ParkingBrakeValue = 0.
      if self.u8ClutchValue is None:
        self.u8ClutchValue = 0.
      if self.u8GearValue is None:
        self.u8GearValue = 0.
      if self.u4ObjectId is None:
        self.u4ObjectId = 0
      if self.u1ThrottleActive is None:
        self.u1ThrottleActive = False
      if self.u1BrakeActive is None:
        self.u1BrakeActive = False
      if self.u1SteeringWheelActive is None:
        self.u1SteeringWheelActive = False
      if self.u1ParkingBrakeActive is None:
        self.u1ParkingBrakeActive = False
      if self.u1ClutchActive is None:
        self.u1ClutchActive = False
      if self.u1GearActive is None:
        self.u1GearActive = False
    else:
      self.u8ThrottleValue = 0.
      self.u8BrakeValue = 0.
      self.u8SteeringWheelValue = 0.
      self.u8ParkingBrakeValue = 0.
      self.u8ClutchValue = 0.
      self.u8GearValue = 0.
      self.u4ObjectId = 0
      self.u1ThrottleActive = False
      self.u1BrakeActive = False
      self.u1SteeringWheelActive = False
      self.u1ParkingBrakeActive = False
      self.u1ClutchActive = False
      self.u1GearActive = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6dI6B().pack(_x.u8ThrottleValue, _x.u8BrakeValue, _x.u8SteeringWheelValue, _x.u8ParkingBrakeValue, _x.u8ClutchValue, _x.u8GearValue, _x.u4ObjectId, _x.u1ThrottleActive, _x.u1BrakeActive, _x.u1SteeringWheelActive, _x.u1ParkingBrakeActive, _x.u1ClutchActive, _x.u1GearActive))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 58
      (_x.u8ThrottleValue, _x.u8BrakeValue, _x.u8SteeringWheelValue, _x.u8ParkingBrakeValue, _x.u8ClutchValue, _x.u8GearValue, _x.u4ObjectId, _x.u1ThrottleActive, _x.u1BrakeActive, _x.u1SteeringWheelActive, _x.u1ParkingBrakeActive, _x.u1ClutchActive, _x.u1GearActive,) = _get_struct_6dI6B().unpack(str[start:end])
      self.u1ThrottleActive = bool(self.u1ThrottleActive)
      self.u1BrakeActive = bool(self.u1BrakeActive)
      self.u1SteeringWheelActive = bool(self.u1SteeringWheelActive)
      self.u1ParkingBrakeActive = bool(self.u1ParkingBrakeActive)
      self.u1ClutchActive = bool(self.u1ClutchActive)
      self.u1GearActive = bool(self.u1GearActive)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6dI6B().pack(_x.u8ThrottleValue, _x.u8BrakeValue, _x.u8SteeringWheelValue, _x.u8ParkingBrakeValue, _x.u8ClutchValue, _x.u8GearValue, _x.u4ObjectId, _x.u1ThrottleActive, _x.u1BrakeActive, _x.u1SteeringWheelActive, _x.u1ParkingBrakeActive, _x.u1ClutchActive, _x.u1GearActive))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 58
      (_x.u8ThrottleValue, _x.u8BrakeValue, _x.u8SteeringWheelValue, _x.u8ParkingBrakeValue, _x.u8ClutchValue, _x.u8GearValue, _x.u4ObjectId, _x.u1ThrottleActive, _x.u1BrakeActive, _x.u1SteeringWheelActive, _x.u1ParkingBrakeActive, _x.u1ClutchActive, _x.u1GearActive,) = _get_struct_6dI6B().unpack(str[start:end])
      self.u1ThrottleActive = bool(self.u1ThrottleActive)
      self.u1BrakeActive = bool(self.u1BrakeActive)
      self.u1SteeringWheelActive = bool(self.u1SteeringWheelActive)
      self.u1ParkingBrakeActive = bool(self.u1ParkingBrakeActive)
      self.u1ClutchActive = bool(self.u1ClutchActive)
      self.u1GearActive = bool(self.u1GearActive)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6dI6B = None
def _get_struct_6dI6B():
    global _struct_6dI6B
    if _struct_6dI6B is None:
        _struct_6dI6B = struct.Struct("<6dI6B")
    return _struct_6dI6B
