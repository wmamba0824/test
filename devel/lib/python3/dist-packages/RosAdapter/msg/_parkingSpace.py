# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/parkingSpace.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import RosAdapter.msg

class parkingSpace(genpy.Message):
  _md5sum = "3e53c23c885c726b62a62404fba515f0"
  _type = "RosAdapter/parkingSpace"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#/** ------ 停车位信息 ------ */
geometry  sGeo
coord     sPos
float32   u4RoadS
float32   u4RoadT
uint64    u8SlotId

================================================================================
MSG: RosAdapter/geometry
# /** ------ 几何信息 ------ */
float32 u4DimX
float32 u4DimY
float32 u4DimZ
float32 u4OffX
float32 u4OffY
float32 u4OffZ
================================================================================
MSG: RosAdapter/coord
# /** ------ 坐标 ------ */
float64   u8X
float64   u8Y
float64   u8Z
float32   u4H
float32   u4P
float32   u4R
uint8     u1Type"""
  __slots__ = ['sGeo','sPos','u4RoadS','u4RoadT','u8SlotId']
  _slot_types = ['RosAdapter/geometry','RosAdapter/coord','float32','float32','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sGeo,sPos,u4RoadS,u4RoadT,u8SlotId

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(parkingSpace, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sGeo is None:
        self.sGeo = RosAdapter.msg.geometry()
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      if self.u4RoadS is None:
        self.u4RoadS = 0.
      if self.u4RoadT is None:
        self.u4RoadT = 0.
      if self.u8SlotId is None:
        self.u8SlotId = 0
    else:
      self.sGeo = RosAdapter.msg.geometry()
      self.sPos = RosAdapter.msg.coord()
      self.u4RoadS = 0.
      self.u4RoadT = 0.
      self.u8SlotId = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f3d3fB2fQ().pack(_x.sGeo.u4DimX, _x.sGeo.u4DimY, _x.sGeo.u4DimZ, _x.sGeo.u4OffX, _x.sGeo.u4OffY, _x.sGeo.u4OffZ, _x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.u4RoadS, _x.u4RoadT, _x.u8SlotId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sGeo is None:
        self.sGeo = RosAdapter.msg.geometry()
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      end = 0
      _x = self
      start = end
      end += 77
      (_x.sGeo.u4DimX, _x.sGeo.u4DimY, _x.sGeo.u4DimZ, _x.sGeo.u4OffX, _x.sGeo.u4OffY, _x.sGeo.u4OffZ, _x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.u4RoadS, _x.u4RoadT, _x.u8SlotId,) = _get_struct_6f3d3fB2fQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f3d3fB2fQ().pack(_x.sGeo.u4DimX, _x.sGeo.u4DimY, _x.sGeo.u4DimZ, _x.sGeo.u4OffX, _x.sGeo.u4OffY, _x.sGeo.u4OffZ, _x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.u4RoadS, _x.u4RoadT, _x.u8SlotId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sGeo is None:
        self.sGeo = RosAdapter.msg.geometry()
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      end = 0
      _x = self
      start = end
      end += 77
      (_x.sGeo.u4DimX, _x.sGeo.u4DimY, _x.sGeo.u4DimZ, _x.sGeo.u4OffX, _x.sGeo.u4OffY, _x.sGeo.u4OffZ, _x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.u4RoadS, _x.u4RoadT, _x.u8SlotId,) = _get_struct_6f3d3fB2fQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f3d3fB2fQ = None
def _get_struct_6f3d3fB2fQ():
    global _struct_6f3d3fB2fQ
    if _struct_6f3d3fB2fQ is None:
        _struct_6f3d3fB2fQ = struct.Struct("<6f3d3fB2fQ")
    return _struct_6f3d3fB2fQ
