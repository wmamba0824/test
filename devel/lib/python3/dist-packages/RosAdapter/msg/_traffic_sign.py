# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/traffic_sign.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import RosAdapter.msg

class traffic_sign(genpy.Message):
  _md5sum = "b667ebe94f436bba109192fd54360970"
  _type = "RosAdapter/traffic_sign"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# /** ------ 交通标志信息 ------ */
string  au1Type
coord   sPos
uint32  u4TrafficSignId
uint32  u4ObjectId
string  au1SubType
float32 u4RoadDist
float32 u4Value
int8    u1MinLane
int8    u1MaxLane
================================================================================
MSG: RosAdapter/coord
# /** ------ 坐标 ------ */
float64   u8X
float64   u8Y
float64   u8Z
float32   u4H
float32   u4P
float32   u4R
uint8     u1Type"""
  __slots__ = ['au1Type','sPos','u4TrafficSignId','u4ObjectId','au1SubType','u4RoadDist','u4Value','u1MinLane','u1MaxLane']
  _slot_types = ['string','RosAdapter/coord','uint32','uint32','string','float32','float32','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       au1Type,sPos,u4TrafficSignId,u4ObjectId,au1SubType,u4RoadDist,u4Value,u1MinLane,u1MaxLane

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(traffic_sign, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.au1Type is None:
        self.au1Type = ''
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      if self.u4TrafficSignId is None:
        self.u4TrafficSignId = 0
      if self.u4ObjectId is None:
        self.u4ObjectId = 0
      if self.au1SubType is None:
        self.au1SubType = ''
      if self.u4RoadDist is None:
        self.u4RoadDist = 0.
      if self.u4Value is None:
        self.u4Value = 0.
      if self.u1MinLane is None:
        self.u1MinLane = 0
      if self.u1MaxLane is None:
        self.u1MaxLane = 0
    else:
      self.au1Type = ''
      self.sPos = RosAdapter.msg.coord()
      self.u4TrafficSignId = 0
      self.u4ObjectId = 0
      self.au1SubType = ''
      self.u4RoadDist = 0.
      self.u4Value = 0.
      self.u1MinLane = 0
      self.u1MaxLane = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.au1Type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3fB2I().pack(_x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.u4TrafficSignId, _x.u4ObjectId))
      _x = self.au1SubType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f2b().pack(_x.u4RoadDist, _x.u4Value, _x.u1MinLane, _x.u1MaxLane))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1Type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1Type = str[start:end]
      _x = self
      start = end
      end += 45
      (_x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.u4TrafficSignId, _x.u4ObjectId,) = _get_struct_3d3fB2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1SubType = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1SubType = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.u4RoadDist, _x.u4Value, _x.u1MinLane, _x.u1MaxLane,) = _get_struct_2f2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.au1Type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d3fB2I().pack(_x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.u4TrafficSignId, _x.u4ObjectId))
      _x = self.au1SubType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f2b().pack(_x.u4RoadDist, _x.u4Value, _x.u1MinLane, _x.u1MaxLane))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1Type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1Type = str[start:end]
      _x = self
      start = end
      end += 45
      (_x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.u4TrafficSignId, _x.u4ObjectId,) = _get_struct_3d3fB2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1SubType = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1SubType = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.u4RoadDist, _x.u4Value, _x.u1MinLane, _x.u1MaxLane,) = _get_struct_2f2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2b = None
def _get_struct_2f2b():
    global _struct_2f2b
    if _struct_2f2b is None:
        _struct_2f2b = struct.Struct("<2f2b")
    return _struct_2f2b
_struct_3d3fB2I = None
def _get_struct_3d3fB2I():
    global _struct_3d3fB2I
    if _struct_3d3fB2I is None:
        _struct_3d3fB2I = struct.Struct("<3d3fB2I")
    return _struct_3d3fB2I
