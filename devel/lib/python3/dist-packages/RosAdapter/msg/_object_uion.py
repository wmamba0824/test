# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/object_uion.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import RosAdapter.msg

class object_uion(genpy.Message):
  _md5sum = "7852172eb40c908fcc049083af8007a0"
  _type = "RosAdapter/object_uion"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """dynamic_object sDynamicObj
mark_object    sMarkObj
sign_object    sSignObj 
================================================================================
MSG: RosAdapter/dynamic_object
# /** ------ 传感器探测到的对象信息 ------ */

float64    u8Dist
float64    u8NearestDist
float64    u8RelativeVelx
float64    u8RelativeVely
float64    u8RelativeAccx
float64    u8RelativeAccy
float64    u8HeadingAngle
coord      sSensorPos
coord      sNearestSensorPos
coord      sSenNearestPosXL
coord      sSenNearestPosXR
coord      sSenNearestPosYL
coord      sSenNearestPosYR
point3d[]  sBoundingBox
uint8      u1MovingSt
================================================================================
MSG: RosAdapter/coord
# /** ------ 坐标 ------ */
float64   u8X
float64   u8Y
float64   u8Z
float32   u4H
float32   u4P
float32   u4R
uint8     u1Type
================================================================================
MSG: RosAdapter/point3d
float64      u8x
float64      u8y
float64      u8z
================================================================================
MSG: RosAdapter/mark_object
# 车道线

float64[]	 au8RoadMarkCoeffL
float64[]	 au8RoadMarkCoeffR
================================================================================
MSG: RosAdapter/sign_object
# 交通标志

float64   u8Dist
float64   u8NearestDist
float64   u8TrafficSignDistX
float64   u8TrafficSignDistY
coord     sSensorPos
coord     sNearestSensorPos
uint8     u1TrafficSignType"""
  __slots__ = ['sDynamicObj','sMarkObj','sSignObj']
  _slot_types = ['RosAdapter/dynamic_object','RosAdapter/mark_object','RosAdapter/sign_object']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sDynamicObj,sMarkObj,sSignObj

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(object_uion, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sDynamicObj is None:
        self.sDynamicObj = RosAdapter.msg.dynamic_object()
      if self.sMarkObj is None:
        self.sMarkObj = RosAdapter.msg.mark_object()
      if self.sSignObj is None:
        self.sSignObj = RosAdapter.msg.sign_object()
    else:
      self.sDynamicObj = RosAdapter.msg.dynamic_object()
      self.sMarkObj = RosAdapter.msg.mark_object()
      self.sSignObj = RosAdapter.msg.sign_object()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10d3fB3d3fB3d3fB3d3fB3d3fB3d3fB().pack(_x.sDynamicObj.u8Dist, _x.sDynamicObj.u8NearestDist, _x.sDynamicObj.u8RelativeVelx, _x.sDynamicObj.u8RelativeVely, _x.sDynamicObj.u8RelativeAccx, _x.sDynamicObj.u8RelativeAccy, _x.sDynamicObj.u8HeadingAngle, _x.sDynamicObj.sSensorPos.u8X, _x.sDynamicObj.sSensorPos.u8Y, _x.sDynamicObj.sSensorPos.u8Z, _x.sDynamicObj.sSensorPos.u4H, _x.sDynamicObj.sSensorPos.u4P, _x.sDynamicObj.sSensorPos.u4R, _x.sDynamicObj.sSensorPos.u1Type, _x.sDynamicObj.sNearestSensorPos.u8X, _x.sDynamicObj.sNearestSensorPos.u8Y, _x.sDynamicObj.sNearestSensorPos.u8Z, _x.sDynamicObj.sNearestSensorPos.u4H, _x.sDynamicObj.sNearestSensorPos.u4P, _x.sDynamicObj.sNearestSensorPos.u4R, _x.sDynamicObj.sNearestSensorPos.u1Type, _x.sDynamicObj.sSenNearestPosXL.u8X, _x.sDynamicObj.sSenNearestPosXL.u8Y, _x.sDynamicObj.sSenNearestPosXL.u8Z, _x.sDynamicObj.sSenNearestPosXL.u4H, _x.sDynamicObj.sSenNearestPosXL.u4P, _x.sDynamicObj.sSenNearestPosXL.u4R, _x.sDynamicObj.sSenNearestPosXL.u1Type, _x.sDynamicObj.sSenNearestPosXR.u8X, _x.sDynamicObj.sSenNearestPosXR.u8Y, _x.sDynamicObj.sSenNearestPosXR.u8Z, _x.sDynamicObj.sSenNearestPosXR.u4H, _x.sDynamicObj.sSenNearestPosXR.u4P, _x.sDynamicObj.sSenNearestPosXR.u4R, _x.sDynamicObj.sSenNearestPosXR.u1Type, _x.sDynamicObj.sSenNearestPosYL.u8X, _x.sDynamicObj.sSenNearestPosYL.u8Y, _x.sDynamicObj.sSenNearestPosYL.u8Z, _x.sDynamicObj.sSenNearestPosYL.u4H, _x.sDynamicObj.sSenNearestPosYL.u4P, _x.sDynamicObj.sSenNearestPosYL.u4R, _x.sDynamicObj.sSenNearestPosYL.u1Type, _x.sDynamicObj.sSenNearestPosYR.u8X, _x.sDynamicObj.sSenNearestPosYR.u8Y, _x.sDynamicObj.sSenNearestPosYR.u8Z, _x.sDynamicObj.sSenNearestPosYR.u4H, _x.sDynamicObj.sSenNearestPosYR.u4P, _x.sDynamicObj.sSenNearestPosYR.u4R, _x.sDynamicObj.sSenNearestPosYR.u1Type))
      length = len(self.sDynamicObj.sBoundingBox)
      buff.write(_struct_I.pack(length))
      for val1 in self.sDynamicObj.sBoundingBox:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.u8x, _x.u8y, _x.u8z))
      _x = self.sDynamicObj.u1MovingSt
      buff.write(_get_struct_B().pack(_x))
      length = len(self.sMarkObj.au8RoadMarkCoeffL)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.sMarkObj.au8RoadMarkCoeffL))
      length = len(self.sMarkObj.au8RoadMarkCoeffR)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.sMarkObj.au8RoadMarkCoeffR))
      _x = self
      buff.write(_get_struct_7d3fB3d3f2B().pack(_x.sSignObj.u8Dist, _x.sSignObj.u8NearestDist, _x.sSignObj.u8TrafficSignDistX, _x.sSignObj.u8TrafficSignDistY, _x.sSignObj.sSensorPos.u8X, _x.sSignObj.sSensorPos.u8Y, _x.sSignObj.sSensorPos.u8Z, _x.sSignObj.sSensorPos.u4H, _x.sSignObj.sSensorPos.u4P, _x.sSignObj.sSensorPos.u4R, _x.sSignObj.sSensorPos.u1Type, _x.sSignObj.sNearestSensorPos.u8X, _x.sSignObj.sNearestSensorPos.u8Y, _x.sSignObj.sNearestSensorPos.u8Z, _x.sSignObj.sNearestSensorPos.u4H, _x.sSignObj.sNearestSensorPos.u4P, _x.sSignObj.sNearestSensorPos.u4R, _x.sSignObj.sNearestSensorPos.u1Type, _x.sSignObj.u1TrafficSignType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sDynamicObj is None:
        self.sDynamicObj = RosAdapter.msg.dynamic_object()
      if self.sMarkObj is None:
        self.sMarkObj = RosAdapter.msg.mark_object()
      if self.sSignObj is None:
        self.sSignObj = RosAdapter.msg.sign_object()
      end = 0
      _x = self
      start = end
      end += 278
      (_x.sDynamicObj.u8Dist, _x.sDynamicObj.u8NearestDist, _x.sDynamicObj.u8RelativeVelx, _x.sDynamicObj.u8RelativeVely, _x.sDynamicObj.u8RelativeAccx, _x.sDynamicObj.u8RelativeAccy, _x.sDynamicObj.u8HeadingAngle, _x.sDynamicObj.sSensorPos.u8X, _x.sDynamicObj.sSensorPos.u8Y, _x.sDynamicObj.sSensorPos.u8Z, _x.sDynamicObj.sSensorPos.u4H, _x.sDynamicObj.sSensorPos.u4P, _x.sDynamicObj.sSensorPos.u4R, _x.sDynamicObj.sSensorPos.u1Type, _x.sDynamicObj.sNearestSensorPos.u8X, _x.sDynamicObj.sNearestSensorPos.u8Y, _x.sDynamicObj.sNearestSensorPos.u8Z, _x.sDynamicObj.sNearestSensorPos.u4H, _x.sDynamicObj.sNearestSensorPos.u4P, _x.sDynamicObj.sNearestSensorPos.u4R, _x.sDynamicObj.sNearestSensorPos.u1Type, _x.sDynamicObj.sSenNearestPosXL.u8X, _x.sDynamicObj.sSenNearestPosXL.u8Y, _x.sDynamicObj.sSenNearestPosXL.u8Z, _x.sDynamicObj.sSenNearestPosXL.u4H, _x.sDynamicObj.sSenNearestPosXL.u4P, _x.sDynamicObj.sSenNearestPosXL.u4R, _x.sDynamicObj.sSenNearestPosXL.u1Type, _x.sDynamicObj.sSenNearestPosXR.u8X, _x.sDynamicObj.sSenNearestPosXR.u8Y, _x.sDynamicObj.sSenNearestPosXR.u8Z, _x.sDynamicObj.sSenNearestPosXR.u4H, _x.sDynamicObj.sSenNearestPosXR.u4P, _x.sDynamicObj.sSenNearestPosXR.u4R, _x.sDynamicObj.sSenNearestPosXR.u1Type, _x.sDynamicObj.sSenNearestPosYL.u8X, _x.sDynamicObj.sSenNearestPosYL.u8Y, _x.sDynamicObj.sSenNearestPosYL.u8Z, _x.sDynamicObj.sSenNearestPosYL.u4H, _x.sDynamicObj.sSenNearestPosYL.u4P, _x.sDynamicObj.sSenNearestPosYL.u4R, _x.sDynamicObj.sSenNearestPosYL.u1Type, _x.sDynamicObj.sSenNearestPosYR.u8X, _x.sDynamicObj.sSenNearestPosYR.u8Y, _x.sDynamicObj.sSenNearestPosYR.u8Z, _x.sDynamicObj.sSenNearestPosYR.u4H, _x.sDynamicObj.sSenNearestPosYR.u4P, _x.sDynamicObj.sSenNearestPosYR.u4R, _x.sDynamicObj.sSenNearestPosYR.u1Type,) = _get_struct_10d3fB3d3fB3d3fB3d3fB3d3fB3d3fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sDynamicObj.sBoundingBox = []
      for i in range(0, length):
        val1 = RosAdapter.msg.point3d()
        _x = val1
        start = end
        end += 24
        (_x.u8x, _x.u8y, _x.u8z,) = _get_struct_3d().unpack(str[start:end])
        self.sDynamicObj.sBoundingBox.append(val1)
      start = end
      end += 1
      (self.sDynamicObj.u1MovingSt,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sMarkObj.au8RoadMarkCoeffL = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sMarkObj.au8RoadMarkCoeffR = s.unpack(str[start:end])
      _x = self
      start = end
      end += 107
      (_x.sSignObj.u8Dist, _x.sSignObj.u8NearestDist, _x.sSignObj.u8TrafficSignDistX, _x.sSignObj.u8TrafficSignDistY, _x.sSignObj.sSensorPos.u8X, _x.sSignObj.sSensorPos.u8Y, _x.sSignObj.sSensorPos.u8Z, _x.sSignObj.sSensorPos.u4H, _x.sSignObj.sSensorPos.u4P, _x.sSignObj.sSensorPos.u4R, _x.sSignObj.sSensorPos.u1Type, _x.sSignObj.sNearestSensorPos.u8X, _x.sSignObj.sNearestSensorPos.u8Y, _x.sSignObj.sNearestSensorPos.u8Z, _x.sSignObj.sNearestSensorPos.u4H, _x.sSignObj.sNearestSensorPos.u4P, _x.sSignObj.sNearestSensorPos.u4R, _x.sSignObj.sNearestSensorPos.u1Type, _x.sSignObj.u1TrafficSignType,) = _get_struct_7d3fB3d3f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10d3fB3d3fB3d3fB3d3fB3d3fB3d3fB().pack(_x.sDynamicObj.u8Dist, _x.sDynamicObj.u8NearestDist, _x.sDynamicObj.u8RelativeVelx, _x.sDynamicObj.u8RelativeVely, _x.sDynamicObj.u8RelativeAccx, _x.sDynamicObj.u8RelativeAccy, _x.sDynamicObj.u8HeadingAngle, _x.sDynamicObj.sSensorPos.u8X, _x.sDynamicObj.sSensorPos.u8Y, _x.sDynamicObj.sSensorPos.u8Z, _x.sDynamicObj.sSensorPos.u4H, _x.sDynamicObj.sSensorPos.u4P, _x.sDynamicObj.sSensorPos.u4R, _x.sDynamicObj.sSensorPos.u1Type, _x.sDynamicObj.sNearestSensorPos.u8X, _x.sDynamicObj.sNearestSensorPos.u8Y, _x.sDynamicObj.sNearestSensorPos.u8Z, _x.sDynamicObj.sNearestSensorPos.u4H, _x.sDynamicObj.sNearestSensorPos.u4P, _x.sDynamicObj.sNearestSensorPos.u4R, _x.sDynamicObj.sNearestSensorPos.u1Type, _x.sDynamicObj.sSenNearestPosXL.u8X, _x.sDynamicObj.sSenNearestPosXL.u8Y, _x.sDynamicObj.sSenNearestPosXL.u8Z, _x.sDynamicObj.sSenNearestPosXL.u4H, _x.sDynamicObj.sSenNearestPosXL.u4P, _x.sDynamicObj.sSenNearestPosXL.u4R, _x.sDynamicObj.sSenNearestPosXL.u1Type, _x.sDynamicObj.sSenNearestPosXR.u8X, _x.sDynamicObj.sSenNearestPosXR.u8Y, _x.sDynamicObj.sSenNearestPosXR.u8Z, _x.sDynamicObj.sSenNearestPosXR.u4H, _x.sDynamicObj.sSenNearestPosXR.u4P, _x.sDynamicObj.sSenNearestPosXR.u4R, _x.sDynamicObj.sSenNearestPosXR.u1Type, _x.sDynamicObj.sSenNearestPosYL.u8X, _x.sDynamicObj.sSenNearestPosYL.u8Y, _x.sDynamicObj.sSenNearestPosYL.u8Z, _x.sDynamicObj.sSenNearestPosYL.u4H, _x.sDynamicObj.sSenNearestPosYL.u4P, _x.sDynamicObj.sSenNearestPosYL.u4R, _x.sDynamicObj.sSenNearestPosYL.u1Type, _x.sDynamicObj.sSenNearestPosYR.u8X, _x.sDynamicObj.sSenNearestPosYR.u8Y, _x.sDynamicObj.sSenNearestPosYR.u8Z, _x.sDynamicObj.sSenNearestPosYR.u4H, _x.sDynamicObj.sSenNearestPosYR.u4P, _x.sDynamicObj.sSenNearestPosYR.u4R, _x.sDynamicObj.sSenNearestPosYR.u1Type))
      length = len(self.sDynamicObj.sBoundingBox)
      buff.write(_struct_I.pack(length))
      for val1 in self.sDynamicObj.sBoundingBox:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.u8x, _x.u8y, _x.u8z))
      _x = self.sDynamicObj.u1MovingSt
      buff.write(_get_struct_B().pack(_x))
      length = len(self.sMarkObj.au8RoadMarkCoeffL)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.sMarkObj.au8RoadMarkCoeffL.tostring())
      length = len(self.sMarkObj.au8RoadMarkCoeffR)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.sMarkObj.au8RoadMarkCoeffR.tostring())
      _x = self
      buff.write(_get_struct_7d3fB3d3f2B().pack(_x.sSignObj.u8Dist, _x.sSignObj.u8NearestDist, _x.sSignObj.u8TrafficSignDistX, _x.sSignObj.u8TrafficSignDistY, _x.sSignObj.sSensorPos.u8X, _x.sSignObj.sSensorPos.u8Y, _x.sSignObj.sSensorPos.u8Z, _x.sSignObj.sSensorPos.u4H, _x.sSignObj.sSensorPos.u4P, _x.sSignObj.sSensorPos.u4R, _x.sSignObj.sSensorPos.u1Type, _x.sSignObj.sNearestSensorPos.u8X, _x.sSignObj.sNearestSensorPos.u8Y, _x.sSignObj.sNearestSensorPos.u8Z, _x.sSignObj.sNearestSensorPos.u4H, _x.sSignObj.sNearestSensorPos.u4P, _x.sSignObj.sNearestSensorPos.u4R, _x.sSignObj.sNearestSensorPos.u1Type, _x.sSignObj.u1TrafficSignType))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sDynamicObj is None:
        self.sDynamicObj = RosAdapter.msg.dynamic_object()
      if self.sMarkObj is None:
        self.sMarkObj = RosAdapter.msg.mark_object()
      if self.sSignObj is None:
        self.sSignObj = RosAdapter.msg.sign_object()
      end = 0
      _x = self
      start = end
      end += 278
      (_x.sDynamicObj.u8Dist, _x.sDynamicObj.u8NearestDist, _x.sDynamicObj.u8RelativeVelx, _x.sDynamicObj.u8RelativeVely, _x.sDynamicObj.u8RelativeAccx, _x.sDynamicObj.u8RelativeAccy, _x.sDynamicObj.u8HeadingAngle, _x.sDynamicObj.sSensorPos.u8X, _x.sDynamicObj.sSensorPos.u8Y, _x.sDynamicObj.sSensorPos.u8Z, _x.sDynamicObj.sSensorPos.u4H, _x.sDynamicObj.sSensorPos.u4P, _x.sDynamicObj.sSensorPos.u4R, _x.sDynamicObj.sSensorPos.u1Type, _x.sDynamicObj.sNearestSensorPos.u8X, _x.sDynamicObj.sNearestSensorPos.u8Y, _x.sDynamicObj.sNearestSensorPos.u8Z, _x.sDynamicObj.sNearestSensorPos.u4H, _x.sDynamicObj.sNearestSensorPos.u4P, _x.sDynamicObj.sNearestSensorPos.u4R, _x.sDynamicObj.sNearestSensorPos.u1Type, _x.sDynamicObj.sSenNearestPosXL.u8X, _x.sDynamicObj.sSenNearestPosXL.u8Y, _x.sDynamicObj.sSenNearestPosXL.u8Z, _x.sDynamicObj.sSenNearestPosXL.u4H, _x.sDynamicObj.sSenNearestPosXL.u4P, _x.sDynamicObj.sSenNearestPosXL.u4R, _x.sDynamicObj.sSenNearestPosXL.u1Type, _x.sDynamicObj.sSenNearestPosXR.u8X, _x.sDynamicObj.sSenNearestPosXR.u8Y, _x.sDynamicObj.sSenNearestPosXR.u8Z, _x.sDynamicObj.sSenNearestPosXR.u4H, _x.sDynamicObj.sSenNearestPosXR.u4P, _x.sDynamicObj.sSenNearestPosXR.u4R, _x.sDynamicObj.sSenNearestPosXR.u1Type, _x.sDynamicObj.sSenNearestPosYL.u8X, _x.sDynamicObj.sSenNearestPosYL.u8Y, _x.sDynamicObj.sSenNearestPosYL.u8Z, _x.sDynamicObj.sSenNearestPosYL.u4H, _x.sDynamicObj.sSenNearestPosYL.u4P, _x.sDynamicObj.sSenNearestPosYL.u4R, _x.sDynamicObj.sSenNearestPosYL.u1Type, _x.sDynamicObj.sSenNearestPosYR.u8X, _x.sDynamicObj.sSenNearestPosYR.u8Y, _x.sDynamicObj.sSenNearestPosYR.u8Z, _x.sDynamicObj.sSenNearestPosYR.u4H, _x.sDynamicObj.sSenNearestPosYR.u4P, _x.sDynamicObj.sSenNearestPosYR.u4R, _x.sDynamicObj.sSenNearestPosYR.u1Type,) = _get_struct_10d3fB3d3fB3d3fB3d3fB3d3fB3d3fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sDynamicObj.sBoundingBox = []
      for i in range(0, length):
        val1 = RosAdapter.msg.point3d()
        _x = val1
        start = end
        end += 24
        (_x.u8x, _x.u8y, _x.u8z,) = _get_struct_3d().unpack(str[start:end])
        self.sDynamicObj.sBoundingBox.append(val1)
      start = end
      end += 1
      (self.sDynamicObj.u1MovingSt,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sMarkObj.au8RoadMarkCoeffL = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sMarkObj.au8RoadMarkCoeffR = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 107
      (_x.sSignObj.u8Dist, _x.sSignObj.u8NearestDist, _x.sSignObj.u8TrafficSignDistX, _x.sSignObj.u8TrafficSignDistY, _x.sSignObj.sSensorPos.u8X, _x.sSignObj.sSensorPos.u8Y, _x.sSignObj.sSensorPos.u8Z, _x.sSignObj.sSensorPos.u4H, _x.sSignObj.sSensorPos.u4P, _x.sSignObj.sSensorPos.u4R, _x.sSignObj.sSensorPos.u1Type, _x.sSignObj.sNearestSensorPos.u8X, _x.sSignObj.sNearestSensorPos.u8Y, _x.sSignObj.sNearestSensorPos.u8Z, _x.sSignObj.sNearestSensorPos.u4H, _x.sSignObj.sNearestSensorPos.u4P, _x.sSignObj.sNearestSensorPos.u4R, _x.sSignObj.sNearestSensorPos.u1Type, _x.sSignObj.u1TrafficSignType,) = _get_struct_7d3fB3d3f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d3fB3d3fB3d3fB3d3fB3d3fB3d3fB = None
def _get_struct_10d3fB3d3fB3d3fB3d3fB3d3fB3d3fB():
    global _struct_10d3fB3d3fB3d3fB3d3fB3d3fB3d3fB
    if _struct_10d3fB3d3fB3d3fB3d3fB3d3fB3d3fB is None:
        _struct_10d3fB3d3fB3d3fB3d3fB3d3fB3d3fB = struct.Struct("<10d3fB3d3fB3d3fB3d3fB3d3fB3d3fB")
    return _struct_10d3fB3d3fB3d3fB3d3fB3d3fB3d3fB
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_7d3fB3d3f2B = None
def _get_struct_7d3fB3d3f2B():
    global _struct_7d3fB3d3f2B
    if _struct_7d3fB3d3f2B is None:
        _struct_7d3fB3d3f2B = struct.Struct("<7d3fB3d3f2B")
    return _struct_7d3fB3d3f2B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
