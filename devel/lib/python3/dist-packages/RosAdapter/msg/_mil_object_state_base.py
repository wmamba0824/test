# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/mil_object_state_base.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mil_object_state_base(genpy.Message):
  _md5sum = "460517ddfac2850057332c48eb20e133"
  _type = "RosAdapter/mil_object_state_base"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#/** ------ MIL测试环境车、行人、障碍物信息描述包 ------ */

uint32     u4LightMask
float32    u4DistanceX
float32    u4DistanceY
float32    u4VelocityX
float32    u4VelocityY
float32    u4AccelerationX
float32    u4AccelerationY
float32    u4YawRate
float32    u4Dist
float32    u4Angle
uint8      u1ObjClass
uint8      u1Flag_detected
uint8      u1Movable
uint8      u1Moving
uint8      u1Obj_Age"""
  __slots__ = ['u4LightMask','u4DistanceX','u4DistanceY','u4VelocityX','u4VelocityY','u4AccelerationX','u4AccelerationY','u4YawRate','u4Dist','u4Angle','u1ObjClass','u1Flag_detected','u1Movable','u1Moving','u1Obj_Age']
  _slot_types = ['uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       u4LightMask,u4DistanceX,u4DistanceY,u4VelocityX,u4VelocityY,u4AccelerationX,u4AccelerationY,u4YawRate,u4Dist,u4Angle,u1ObjClass,u1Flag_detected,u1Movable,u1Moving,u1Obj_Age

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mil_object_state_base, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.u4LightMask is None:
        self.u4LightMask = 0
      if self.u4DistanceX is None:
        self.u4DistanceX = 0.
      if self.u4DistanceY is None:
        self.u4DistanceY = 0.
      if self.u4VelocityX is None:
        self.u4VelocityX = 0.
      if self.u4VelocityY is None:
        self.u4VelocityY = 0.
      if self.u4AccelerationX is None:
        self.u4AccelerationX = 0.
      if self.u4AccelerationY is None:
        self.u4AccelerationY = 0.
      if self.u4YawRate is None:
        self.u4YawRate = 0.
      if self.u4Dist is None:
        self.u4Dist = 0.
      if self.u4Angle is None:
        self.u4Angle = 0.
      if self.u1ObjClass is None:
        self.u1ObjClass = 0
      if self.u1Flag_detected is None:
        self.u1Flag_detected = 0
      if self.u1Movable is None:
        self.u1Movable = 0
      if self.u1Moving is None:
        self.u1Moving = 0
      if self.u1Obj_Age is None:
        self.u1Obj_Age = 0
    else:
      self.u4LightMask = 0
      self.u4DistanceX = 0.
      self.u4DistanceY = 0.
      self.u4VelocityX = 0.
      self.u4VelocityY = 0.
      self.u4AccelerationX = 0.
      self.u4AccelerationY = 0.
      self.u4YawRate = 0.
      self.u4Dist = 0.
      self.u4Angle = 0.
      self.u1ObjClass = 0
      self.u1Flag_detected = 0
      self.u1Movable = 0
      self.u1Moving = 0
      self.u1Obj_Age = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I9f5B().pack(_x.u4LightMask, _x.u4DistanceX, _x.u4DistanceY, _x.u4VelocityX, _x.u4VelocityY, _x.u4AccelerationX, _x.u4AccelerationY, _x.u4YawRate, _x.u4Dist, _x.u4Angle, _x.u1ObjClass, _x.u1Flag_detected, _x.u1Movable, _x.u1Moving, _x.u1Obj_Age))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.u4LightMask, _x.u4DistanceX, _x.u4DistanceY, _x.u4VelocityX, _x.u4VelocityY, _x.u4AccelerationX, _x.u4AccelerationY, _x.u4YawRate, _x.u4Dist, _x.u4Angle, _x.u1ObjClass, _x.u1Flag_detected, _x.u1Movable, _x.u1Moving, _x.u1Obj_Age,) = _get_struct_I9f5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I9f5B().pack(_x.u4LightMask, _x.u4DistanceX, _x.u4DistanceY, _x.u4VelocityX, _x.u4VelocityY, _x.u4AccelerationX, _x.u4AccelerationY, _x.u4YawRate, _x.u4Dist, _x.u4Angle, _x.u1ObjClass, _x.u1Flag_detected, _x.u1Movable, _x.u1Moving, _x.u1Obj_Age))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.u4LightMask, _x.u4DistanceX, _x.u4DistanceY, _x.u4VelocityX, _x.u4VelocityY, _x.u4AccelerationX, _x.u4AccelerationY, _x.u4YawRate, _x.u4Dist, _x.u4Angle, _x.u1ObjClass, _x.u1Flag_detected, _x.u1Movable, _x.u1Moving, _x.u1Obj_Age,) = _get_struct_I9f5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I9f5B = None
def _get_struct_I9f5B():
    global _struct_I9f5B
    if _struct_I9f5B is None:
        _struct_I9f5B = struct.Struct("<I9f5B")
    return _struct_I9f5B
