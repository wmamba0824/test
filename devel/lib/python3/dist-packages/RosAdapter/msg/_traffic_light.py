# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/traffic_light.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import RosAdapter.msg

class traffic_light(genpy.Message):
  _md5sum = "05f765de27ecea681bdb9de73fefe6a1"
  _type = "RosAdapter/traffic_light"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# /** ------ 交通灯信息 ------ */
int32                    u4Id
int32                    u4CtrlId
uint32                   u4NoPhases
uint32                   u4DataSize
float32                  u4State
float32                  u4CycleTime
traffic_light_phase[]    phases
================================================================================
MSG: RosAdapter/traffic_light_phase
# /** ------ 交通灯相位信息 ------ */

float32     u4Duration
uint8       u1Status   """
  __slots__ = ['u4Id','u4CtrlId','u4NoPhases','u4DataSize','u4State','u4CycleTime','phases']
  _slot_types = ['int32','int32','uint32','uint32','float32','float32','RosAdapter/traffic_light_phase[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       u4Id,u4CtrlId,u4NoPhases,u4DataSize,u4State,u4CycleTime,phases

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(traffic_light, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.u4Id is None:
        self.u4Id = 0
      if self.u4CtrlId is None:
        self.u4CtrlId = 0
      if self.u4NoPhases is None:
        self.u4NoPhases = 0
      if self.u4DataSize is None:
        self.u4DataSize = 0
      if self.u4State is None:
        self.u4State = 0.
      if self.u4CycleTime is None:
        self.u4CycleTime = 0.
      if self.phases is None:
        self.phases = []
    else:
      self.u4Id = 0
      self.u4CtrlId = 0
      self.u4NoPhases = 0
      self.u4DataSize = 0
      self.u4State = 0.
      self.u4CycleTime = 0.
      self.phases = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i2I2f().pack(_x.u4Id, _x.u4CtrlId, _x.u4NoPhases, _x.u4DataSize, _x.u4State, _x.u4CycleTime))
      length = len(self.phases)
      buff.write(_struct_I.pack(length))
      for val1 in self.phases:
        _x = val1
        buff.write(_get_struct_fB().pack(_x.u4Duration, _x.u1Status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.phases is None:
        self.phases = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.u4Id, _x.u4CtrlId, _x.u4NoPhases, _x.u4DataSize, _x.u4State, _x.u4CycleTime,) = _get_struct_2i2I2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.phases = []
      for i in range(0, length):
        val1 = RosAdapter.msg.traffic_light_phase()
        _x = val1
        start = end
        end += 5
        (_x.u4Duration, _x.u1Status,) = _get_struct_fB().unpack(str[start:end])
        self.phases.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i2I2f().pack(_x.u4Id, _x.u4CtrlId, _x.u4NoPhases, _x.u4DataSize, _x.u4State, _x.u4CycleTime))
      length = len(self.phases)
      buff.write(_struct_I.pack(length))
      for val1 in self.phases:
        _x = val1
        buff.write(_get_struct_fB().pack(_x.u4Duration, _x.u1Status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.phases is None:
        self.phases = None
      end = 0
      _x = self
      start = end
      end += 24
      (_x.u4Id, _x.u4CtrlId, _x.u4NoPhases, _x.u4DataSize, _x.u4State, _x.u4CycleTime,) = _get_struct_2i2I2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.phases = []
      for i in range(0, length):
        val1 = RosAdapter.msg.traffic_light_phase()
        _x = val1
        start = end
        end += 5
        (_x.u4Duration, _x.u1Status,) = _get_struct_fB().unpack(str[start:end])
        self.phases.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2I2f = None
def _get_struct_2i2I2f():
    global _struct_2i2I2f
    if _struct_2i2I2f is None:
        _struct_2i2I2f = struct.Struct("<2i2I2f")
    return _struct_2i2I2f
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB
