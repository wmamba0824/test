# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/assign_controller.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import RosAdapter.msg

class assign_controller(genpy.Message):
  _md5sum = "b69f794058ba5b23b8c59db3ddbf21fb"
  _type = "RosAdapter/assign_controller"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# /** ------分配控制器 ------ */

string                               au1ControllerName
uint32                               u4ObjectId
uint32                               u4PropertyNum
assign_controller_property[]         properties
================================================================================
MSG: RosAdapter/assign_controller_property
# /** ------分配控制器的属性信息 ------ */

string   au1Name
string   au1Value"""
  __slots__ = ['au1ControllerName','u4ObjectId','u4PropertyNum','properties']
  _slot_types = ['string','uint32','uint32','RosAdapter/assign_controller_property[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       au1ControllerName,u4ObjectId,u4PropertyNum,properties

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(assign_controller, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.au1ControllerName is None:
        self.au1ControllerName = ''
      if self.u4ObjectId is None:
        self.u4ObjectId = 0
      if self.u4PropertyNum is None:
        self.u4PropertyNum = 0
      if self.properties is None:
        self.properties = []
    else:
      self.au1ControllerName = ''
      self.u4ObjectId = 0
      self.u4PropertyNum = 0
      self.properties = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.au1ControllerName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.u4ObjectId, _x.u4PropertyNum))
      length = len(self.properties)
      buff.write(_struct_I.pack(length))
      for val1 in self.properties:
        _x = val1.au1Name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.au1Value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.properties is None:
        self.properties = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1ControllerName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1ControllerName = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.u4ObjectId, _x.u4PropertyNum,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.properties = []
      for i in range(0, length):
        val1 = RosAdapter.msg.assign_controller_property()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.au1Name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.au1Name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.au1Value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.au1Value = str[start:end]
        self.properties.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.au1ControllerName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.u4ObjectId, _x.u4PropertyNum))
      length = len(self.properties)
      buff.write(_struct_I.pack(length))
      for val1 in self.properties:
        _x = val1.au1Name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.au1Value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.properties is None:
        self.properties = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1ControllerName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1ControllerName = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.u4ObjectId, _x.u4PropertyNum,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.properties = []
      for i in range(0, length):
        val1 = RosAdapter.msg.assign_controller_property()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.au1Name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.au1Name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.au1Value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.au1Value = str[start:end]
        self.properties.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
