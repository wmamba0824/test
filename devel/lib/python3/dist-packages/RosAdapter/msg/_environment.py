# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/environment.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class environment(genpy.Message):
  _md5sum = "dd90b74b2548174d66e34a98a2d7dbde"
  _type = "RosAdapter/environment"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# /** ------ 环境信息 ------ */
float64      u8RainIntensity
float64      u8SnowIntensity
float64      u8FogIntensity
float64      u8FogVisualRange
uint32       u4TimeOfDay
int16        u2TimeZoneMinutesWest
uint16       u2Year
uint8        u1CloudState
uint8        u1Day
uint8        u1Month"""
  __slots__ = ['u8RainIntensity','u8SnowIntensity','u8FogIntensity','u8FogVisualRange','u4TimeOfDay','u2TimeZoneMinutesWest','u2Year','u1CloudState','u1Day','u1Month']
  _slot_types = ['float64','float64','float64','float64','uint32','int16','uint16','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       u8RainIntensity,u8SnowIntensity,u8FogIntensity,u8FogVisualRange,u4TimeOfDay,u2TimeZoneMinutesWest,u2Year,u1CloudState,u1Day,u1Month

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(environment, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.u8RainIntensity is None:
        self.u8RainIntensity = 0.
      if self.u8SnowIntensity is None:
        self.u8SnowIntensity = 0.
      if self.u8FogIntensity is None:
        self.u8FogIntensity = 0.
      if self.u8FogVisualRange is None:
        self.u8FogVisualRange = 0.
      if self.u4TimeOfDay is None:
        self.u4TimeOfDay = 0
      if self.u2TimeZoneMinutesWest is None:
        self.u2TimeZoneMinutesWest = 0
      if self.u2Year is None:
        self.u2Year = 0
      if self.u1CloudState is None:
        self.u1CloudState = 0
      if self.u1Day is None:
        self.u1Day = 0
      if self.u1Month is None:
        self.u1Month = 0
    else:
      self.u8RainIntensity = 0.
      self.u8SnowIntensity = 0.
      self.u8FogIntensity = 0.
      self.u8FogVisualRange = 0.
      self.u4TimeOfDay = 0
      self.u2TimeZoneMinutesWest = 0
      self.u2Year = 0
      self.u1CloudState = 0
      self.u1Day = 0
      self.u1Month = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4dIhH3B().pack(_x.u8RainIntensity, _x.u8SnowIntensity, _x.u8FogIntensity, _x.u8FogVisualRange, _x.u4TimeOfDay, _x.u2TimeZoneMinutesWest, _x.u2Year, _x.u1CloudState, _x.u1Day, _x.u1Month))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.u8RainIntensity, _x.u8SnowIntensity, _x.u8FogIntensity, _x.u8FogVisualRange, _x.u4TimeOfDay, _x.u2TimeZoneMinutesWest, _x.u2Year, _x.u1CloudState, _x.u1Day, _x.u1Month,) = _get_struct_4dIhH3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4dIhH3B().pack(_x.u8RainIntensity, _x.u8SnowIntensity, _x.u8FogIntensity, _x.u8FogVisualRange, _x.u4TimeOfDay, _x.u2TimeZoneMinutesWest, _x.u2Year, _x.u1CloudState, _x.u1Day, _x.u1Month))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 43
      (_x.u8RainIntensity, _x.u8SnowIntensity, _x.u8FogIntensity, _x.u8FogVisualRange, _x.u4TimeOfDay, _x.u2TimeZoneMinutesWest, _x.u2Year, _x.u1CloudState, _x.u1Day, _x.u1Month,) = _get_struct_4dIhH3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4dIhH3B = None
def _get_struct_4dIhH3B():
    global _struct_4dIhH3B
    if _struct_4dIhH3B is None:
        _struct_4dIhH3B = struct.Struct("<4dIhH3B")
    return _struct_4dIhH3B
