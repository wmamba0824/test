# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/object_state.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import RosAdapter.msg

class object_state(genpy.Message):
  _md5sum = "487cbf303de88174ac14ecc4b4a926e9"
  _type = "RosAdapter/object_state"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# /** ------ 对象信息 ------ */
coord           sSpeed
coord           sAccel
geometry        sGeo
coord           sPos
string          au1Name
string          au1ModelFileName
string          au1ModelName
float64[]       au8ParamScale
uint64          u8RoadId
float64         u8SpeedLimit
uint32          u4Id
float32         u4RoadS
float32         u4RoadT
float32         u4HdgRel
float32         u4LaneOffset
float32         u4TraveledDist
uint16          u2visMask
uint8           u1Type
int8            u1LaneId
uint8           u1Dir
bool            u1IsOnRoad
uint8           u1category
================================================================================
MSG: RosAdapter/coord
# /** ------ 坐标 ------ */
float64   u8X
float64   u8Y
float64   u8Z
float32   u4H
float32   u4P
float32   u4R
uint8     u1Type
================================================================================
MSG: RosAdapter/geometry
# /** ------ 几何信息 ------ */
float32 u4DimX
float32 u4DimY
float32 u4DimZ
float32 u4OffX
float32 u4OffY
float32 u4OffZ"""
  __slots__ = ['sSpeed','sAccel','sGeo','sPos','au1Name','au1ModelFileName','au1ModelName','au8ParamScale','u8RoadId','u8SpeedLimit','u4Id','u4RoadS','u4RoadT','u4HdgRel','u4LaneOffset','u4TraveledDist','u2visMask','u1Type','u1LaneId','u1Dir','u1IsOnRoad','u1category']
  _slot_types = ['RosAdapter/coord','RosAdapter/coord','RosAdapter/geometry','RosAdapter/coord','string','string','string','float64[]','uint64','float64','uint32','float32','float32','float32','float32','float32','uint16','uint8','int8','uint8','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sSpeed,sAccel,sGeo,sPos,au1Name,au1ModelFileName,au1ModelName,au8ParamScale,u8RoadId,u8SpeedLimit,u4Id,u4RoadS,u4RoadT,u4HdgRel,u4LaneOffset,u4TraveledDist,u2visMask,u1Type,u1LaneId,u1Dir,u1IsOnRoad,u1category

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(object_state, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sSpeed is None:
        self.sSpeed = RosAdapter.msg.coord()
      if self.sAccel is None:
        self.sAccel = RosAdapter.msg.coord()
      if self.sGeo is None:
        self.sGeo = RosAdapter.msg.geometry()
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      if self.au1Name is None:
        self.au1Name = ''
      if self.au1ModelFileName is None:
        self.au1ModelFileName = ''
      if self.au1ModelName is None:
        self.au1ModelName = ''
      if self.au8ParamScale is None:
        self.au8ParamScale = []
      if self.u8RoadId is None:
        self.u8RoadId = 0
      if self.u8SpeedLimit is None:
        self.u8SpeedLimit = 0.
      if self.u4Id is None:
        self.u4Id = 0
      if self.u4RoadS is None:
        self.u4RoadS = 0.
      if self.u4RoadT is None:
        self.u4RoadT = 0.
      if self.u4HdgRel is None:
        self.u4HdgRel = 0.
      if self.u4LaneOffset is None:
        self.u4LaneOffset = 0.
      if self.u4TraveledDist is None:
        self.u4TraveledDist = 0.
      if self.u2visMask is None:
        self.u2visMask = 0
      if self.u1Type is None:
        self.u1Type = 0
      if self.u1LaneId is None:
        self.u1LaneId = 0
      if self.u1Dir is None:
        self.u1Dir = 0
      if self.u1IsOnRoad is None:
        self.u1IsOnRoad = False
      if self.u1category is None:
        self.u1category = 0
    else:
      self.sSpeed = RosAdapter.msg.coord()
      self.sAccel = RosAdapter.msg.coord()
      self.sGeo = RosAdapter.msg.geometry()
      self.sPos = RosAdapter.msg.coord()
      self.au1Name = ''
      self.au1ModelFileName = ''
      self.au1ModelName = ''
      self.au8ParamScale = []
      self.u8RoadId = 0
      self.u8SpeedLimit = 0.
      self.u4Id = 0
      self.u4RoadS = 0.
      self.u4RoadT = 0.
      self.u4HdgRel = 0.
      self.u4LaneOffset = 0.
      self.u4TraveledDist = 0.
      self.u2visMask = 0
      self.u1Type = 0
      self.u1LaneId = 0
      self.u1Dir = 0
      self.u1IsOnRoad = False
      self.u1category = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d3fB3d3fB6f3d3fB().pack(_x.sSpeed.u8X, _x.sSpeed.u8Y, _x.sSpeed.u8Z, _x.sSpeed.u4H, _x.sSpeed.u4P, _x.sSpeed.u4R, _x.sSpeed.u1Type, _x.sAccel.u8X, _x.sAccel.u8Y, _x.sAccel.u8Z, _x.sAccel.u4H, _x.sAccel.u4P, _x.sAccel.u4R, _x.sAccel.u1Type, _x.sGeo.u4DimX, _x.sGeo.u4DimY, _x.sGeo.u4DimZ, _x.sGeo.u4OffX, _x.sGeo.u4OffY, _x.sGeo.u4OffZ, _x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type))
      _x = self.au1Name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.au1ModelFileName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.au1ModelName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.au8ParamScale)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.au8ParamScale))
      _x = self
      buff.write(_get_struct_QdI5fHBb3B().pack(_x.u8RoadId, _x.u8SpeedLimit, _x.u4Id, _x.u4RoadS, _x.u4RoadT, _x.u4HdgRel, _x.u4LaneOffset, _x.u4TraveledDist, _x.u2visMask, _x.u1Type, _x.u1LaneId, _x.u1Dir, _x.u1IsOnRoad, _x.u1category))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sSpeed is None:
        self.sSpeed = RosAdapter.msg.coord()
      if self.sAccel is None:
        self.sAccel = RosAdapter.msg.coord()
      if self.sGeo is None:
        self.sGeo = RosAdapter.msg.geometry()
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      end = 0
      _x = self
      start = end
      end += 135
      (_x.sSpeed.u8X, _x.sSpeed.u8Y, _x.sSpeed.u8Z, _x.sSpeed.u4H, _x.sSpeed.u4P, _x.sSpeed.u4R, _x.sSpeed.u1Type, _x.sAccel.u8X, _x.sAccel.u8Y, _x.sAccel.u8Z, _x.sAccel.u4H, _x.sAccel.u4P, _x.sAccel.u4R, _x.sAccel.u1Type, _x.sGeo.u4DimX, _x.sGeo.u4DimY, _x.sGeo.u4DimZ, _x.sGeo.u4OffX, _x.sGeo.u4OffY, _x.sGeo.u4OffZ, _x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type,) = _get_struct_3d3fB3d3fB6f3d3fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1Name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1Name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1ModelFileName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1ModelFileName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1ModelName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1ModelName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.au8ParamScale = s.unpack(str[start:end])
      _x = self
      start = end
      end += 47
      (_x.u8RoadId, _x.u8SpeedLimit, _x.u4Id, _x.u4RoadS, _x.u4RoadT, _x.u4HdgRel, _x.u4LaneOffset, _x.u4TraveledDist, _x.u2visMask, _x.u1Type, _x.u1LaneId, _x.u1Dir, _x.u1IsOnRoad, _x.u1category,) = _get_struct_QdI5fHBb3B().unpack(str[start:end])
      self.u1IsOnRoad = bool(self.u1IsOnRoad)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d3fB3d3fB6f3d3fB().pack(_x.sSpeed.u8X, _x.sSpeed.u8Y, _x.sSpeed.u8Z, _x.sSpeed.u4H, _x.sSpeed.u4P, _x.sSpeed.u4R, _x.sSpeed.u1Type, _x.sAccel.u8X, _x.sAccel.u8Y, _x.sAccel.u8Z, _x.sAccel.u4H, _x.sAccel.u4P, _x.sAccel.u4R, _x.sAccel.u1Type, _x.sGeo.u4DimX, _x.sGeo.u4DimY, _x.sGeo.u4DimZ, _x.sGeo.u4OffX, _x.sGeo.u4OffY, _x.sGeo.u4OffZ, _x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type))
      _x = self.au1Name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.au1ModelFileName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.au1ModelName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.au8ParamScale)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.au8ParamScale.tostring())
      _x = self
      buff.write(_get_struct_QdI5fHBb3B().pack(_x.u8RoadId, _x.u8SpeedLimit, _x.u4Id, _x.u4RoadS, _x.u4RoadT, _x.u4HdgRel, _x.u4LaneOffset, _x.u4TraveledDist, _x.u2visMask, _x.u1Type, _x.u1LaneId, _x.u1Dir, _x.u1IsOnRoad, _x.u1category))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sSpeed is None:
        self.sSpeed = RosAdapter.msg.coord()
      if self.sAccel is None:
        self.sAccel = RosAdapter.msg.coord()
      if self.sGeo is None:
        self.sGeo = RosAdapter.msg.geometry()
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      end = 0
      _x = self
      start = end
      end += 135
      (_x.sSpeed.u8X, _x.sSpeed.u8Y, _x.sSpeed.u8Z, _x.sSpeed.u4H, _x.sSpeed.u4P, _x.sSpeed.u4R, _x.sSpeed.u1Type, _x.sAccel.u8X, _x.sAccel.u8Y, _x.sAccel.u8Z, _x.sAccel.u4H, _x.sAccel.u4P, _x.sAccel.u4R, _x.sAccel.u1Type, _x.sGeo.u4DimX, _x.sGeo.u4DimY, _x.sGeo.u4DimZ, _x.sGeo.u4OffX, _x.sGeo.u4OffY, _x.sGeo.u4OffZ, _x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type,) = _get_struct_3d3fB3d3fB6f3d3fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1Name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1Name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1ModelFileName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1ModelFileName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1ModelName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1ModelName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.au8ParamScale = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 47
      (_x.u8RoadId, _x.u8SpeedLimit, _x.u4Id, _x.u4RoadS, _x.u4RoadT, _x.u4HdgRel, _x.u4LaneOffset, _x.u4TraveledDist, _x.u2visMask, _x.u1Type, _x.u1LaneId, _x.u1Dir, _x.u1IsOnRoad, _x.u1category,) = _get_struct_QdI5fHBb3B().unpack(str[start:end])
      self.u1IsOnRoad = bool(self.u1IsOnRoad)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d3fB3d3fB6f3d3fB = None
def _get_struct_3d3fB3d3fB6f3d3fB():
    global _struct_3d3fB3d3fB6f3d3fB
    if _struct_3d3fB3d3fB6f3d3fB is None:
        _struct_3d3fB3d3fB6f3d3fB = struct.Struct("<3d3fB3d3fB6f3d3fB")
    return _struct_3d3fB3d3fB6f3d3fB
_struct_QdI5fHBb3B = None
def _get_struct_QdI5fHBb3B():
    global _struct_QdI5fHBb3B
    if _struct_QdI5fHBb3B is None:
        _struct_QdI5fHBb3B = struct.Struct("<QdI5fHBb3B")
    return _struct_QdI5fHBb3B
