# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/mil_amesim_signal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mil_amesim_signal(genpy.Message):
  _md5sum = "b272e0120e62408b4b47d6764b084b50"
  _type = "RosAdapter/mil_amesim_signal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# /** ------ MIL AMESim 测试信息描述包 ------ */

float32       u4LeftLen
float32       u4NextLen
float32       u4NextAgeSpeed
float32       u4NextMinSpeed
float32       u4NextMaxSpeed
float32       u4NextGradient
float32       u4NextCongest
uint8         u1RoadType
float32       u4DisLimit
bool          u1IsFarAwayLimit
float32       u4LimitSpeed
bool          ulIsJunction
float32       u4DisJunction
bool          ulIsFarAwayJunc
uint8         ultrafficLightStat
float32       u4Curvity
float32       u4RelativeVel
float32       u4RelativeDis"""
  __slots__ = ['u4LeftLen','u4NextLen','u4NextAgeSpeed','u4NextMinSpeed','u4NextMaxSpeed','u4NextGradient','u4NextCongest','u1RoadType','u4DisLimit','u1IsFarAwayLimit','u4LimitSpeed','ulIsJunction','u4DisJunction','ulIsFarAwayJunc','ultrafficLightStat','u4Curvity','u4RelativeVel','u4RelativeDis']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','uint8','float32','bool','float32','bool','float32','bool','uint8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       u4LeftLen,u4NextLen,u4NextAgeSpeed,u4NextMinSpeed,u4NextMaxSpeed,u4NextGradient,u4NextCongest,u1RoadType,u4DisLimit,u1IsFarAwayLimit,u4LimitSpeed,ulIsJunction,u4DisJunction,ulIsFarAwayJunc,ultrafficLightStat,u4Curvity,u4RelativeVel,u4RelativeDis

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mil_amesim_signal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.u4LeftLen is None:
        self.u4LeftLen = 0.
      if self.u4NextLen is None:
        self.u4NextLen = 0.
      if self.u4NextAgeSpeed is None:
        self.u4NextAgeSpeed = 0.
      if self.u4NextMinSpeed is None:
        self.u4NextMinSpeed = 0.
      if self.u4NextMaxSpeed is None:
        self.u4NextMaxSpeed = 0.
      if self.u4NextGradient is None:
        self.u4NextGradient = 0.
      if self.u4NextCongest is None:
        self.u4NextCongest = 0.
      if self.u1RoadType is None:
        self.u1RoadType = 0
      if self.u4DisLimit is None:
        self.u4DisLimit = 0.
      if self.u1IsFarAwayLimit is None:
        self.u1IsFarAwayLimit = False
      if self.u4LimitSpeed is None:
        self.u4LimitSpeed = 0.
      if self.ulIsJunction is None:
        self.ulIsJunction = False
      if self.u4DisJunction is None:
        self.u4DisJunction = 0.
      if self.ulIsFarAwayJunc is None:
        self.ulIsFarAwayJunc = False
      if self.ultrafficLightStat is None:
        self.ultrafficLightStat = 0
      if self.u4Curvity is None:
        self.u4Curvity = 0.
      if self.u4RelativeVel is None:
        self.u4RelativeVel = 0.
      if self.u4RelativeDis is None:
        self.u4RelativeDis = 0.
    else:
      self.u4LeftLen = 0.
      self.u4NextLen = 0.
      self.u4NextAgeSpeed = 0.
      self.u4NextMinSpeed = 0.
      self.u4NextMaxSpeed = 0.
      self.u4NextGradient = 0.
      self.u4NextCongest = 0.
      self.u1RoadType = 0
      self.u4DisLimit = 0.
      self.u1IsFarAwayLimit = False
      self.u4LimitSpeed = 0.
      self.ulIsJunction = False
      self.u4DisJunction = 0.
      self.ulIsFarAwayJunc = False
      self.ultrafficLightStat = 0
      self.u4Curvity = 0.
      self.u4RelativeVel = 0.
      self.u4RelativeDis = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7fBfBfBf2B3f().pack(_x.u4LeftLen, _x.u4NextLen, _x.u4NextAgeSpeed, _x.u4NextMinSpeed, _x.u4NextMaxSpeed, _x.u4NextGradient, _x.u4NextCongest, _x.u1RoadType, _x.u4DisLimit, _x.u1IsFarAwayLimit, _x.u4LimitSpeed, _x.ulIsJunction, _x.u4DisJunction, _x.ulIsFarAwayJunc, _x.ultrafficLightStat, _x.u4Curvity, _x.u4RelativeVel, _x.u4RelativeDis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 57
      (_x.u4LeftLen, _x.u4NextLen, _x.u4NextAgeSpeed, _x.u4NextMinSpeed, _x.u4NextMaxSpeed, _x.u4NextGradient, _x.u4NextCongest, _x.u1RoadType, _x.u4DisLimit, _x.u1IsFarAwayLimit, _x.u4LimitSpeed, _x.ulIsJunction, _x.u4DisJunction, _x.ulIsFarAwayJunc, _x.ultrafficLightStat, _x.u4Curvity, _x.u4RelativeVel, _x.u4RelativeDis,) = _get_struct_7fBfBfBf2B3f().unpack(str[start:end])
      self.u1IsFarAwayLimit = bool(self.u1IsFarAwayLimit)
      self.ulIsJunction = bool(self.ulIsJunction)
      self.ulIsFarAwayJunc = bool(self.ulIsFarAwayJunc)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7fBfBfBf2B3f().pack(_x.u4LeftLen, _x.u4NextLen, _x.u4NextAgeSpeed, _x.u4NextMinSpeed, _x.u4NextMaxSpeed, _x.u4NextGradient, _x.u4NextCongest, _x.u1RoadType, _x.u4DisLimit, _x.u1IsFarAwayLimit, _x.u4LimitSpeed, _x.ulIsJunction, _x.u4DisJunction, _x.ulIsFarAwayJunc, _x.ultrafficLightStat, _x.u4Curvity, _x.u4RelativeVel, _x.u4RelativeDis))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 57
      (_x.u4LeftLen, _x.u4NextLen, _x.u4NextAgeSpeed, _x.u4NextMinSpeed, _x.u4NextMaxSpeed, _x.u4NextGradient, _x.u4NextCongest, _x.u1RoadType, _x.u4DisLimit, _x.u1IsFarAwayLimit, _x.u4LimitSpeed, _x.ulIsJunction, _x.u4DisJunction, _x.ulIsFarAwayJunc, _x.ultrafficLightStat, _x.u4Curvity, _x.u4RelativeVel, _x.u4RelativeDis,) = _get_struct_7fBfBfBf2B3f().unpack(str[start:end])
      self.u1IsFarAwayLimit = bool(self.u1IsFarAwayLimit)
      self.ulIsJunction = bool(self.ulIsJunction)
      self.ulIsFarAwayJunc = bool(self.ulIsFarAwayJunc)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7fBfBfBf2B3f = None
def _get_struct_7fBfBfBf2B3f():
    global _struct_7fBfBfBf2B3f
    if _struct_7fBfBfBf2B3f is None:
        _struct_7fBfBfBf2B3f = struct.Struct("<7fBfBfBf2B3f")
    return _struct_7fBfBfBf2B3f
