# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/lane_info.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class lane_info(genpy.Message):
  _md5sum = "956c49218f476e72e0ba077080aff039"
  _type = "RosAdapter/lane_info"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# /** ------ 车道信息 ------ */
uint64   u8RoadId
uint32   u4ObjectId
float32  u4Width
uint16   u2Type
int8     u1Id
uint8    u1NeighborMask
int8     u1LeftLaneId
int8     u1RightLaneId"""
  __slots__ = ['u8RoadId','u4ObjectId','u4Width','u2Type','u1Id','u1NeighborMask','u1LeftLaneId','u1RightLaneId']
  _slot_types = ['uint64','uint32','float32','uint16','int8','uint8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       u8RoadId,u4ObjectId,u4Width,u2Type,u1Id,u1NeighborMask,u1LeftLaneId,u1RightLaneId

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lane_info, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.u8RoadId is None:
        self.u8RoadId = 0
      if self.u4ObjectId is None:
        self.u4ObjectId = 0
      if self.u4Width is None:
        self.u4Width = 0.
      if self.u2Type is None:
        self.u2Type = 0
      if self.u1Id is None:
        self.u1Id = 0
      if self.u1NeighborMask is None:
        self.u1NeighborMask = 0
      if self.u1LeftLaneId is None:
        self.u1LeftLaneId = 0
      if self.u1RightLaneId is None:
        self.u1RightLaneId = 0
    else:
      self.u8RoadId = 0
      self.u4ObjectId = 0
      self.u4Width = 0.
      self.u2Type = 0
      self.u1Id = 0
      self.u1NeighborMask = 0
      self.u1LeftLaneId = 0
      self.u1RightLaneId = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QIfHbB2b().pack(_x.u8RoadId, _x.u4ObjectId, _x.u4Width, _x.u2Type, _x.u1Id, _x.u1NeighborMask, _x.u1LeftLaneId, _x.u1RightLaneId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.u8RoadId, _x.u4ObjectId, _x.u4Width, _x.u2Type, _x.u1Id, _x.u1NeighborMask, _x.u1LeftLaneId, _x.u1RightLaneId,) = _get_struct_QIfHbB2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QIfHbB2b().pack(_x.u8RoadId, _x.u4ObjectId, _x.u4Width, _x.u2Type, _x.u1Id, _x.u1NeighborMask, _x.u1LeftLaneId, _x.u1RightLaneId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.u8RoadId, _x.u4ObjectId, _x.u4Width, _x.u2Type, _x.u1Id, _x.u1NeighborMask, _x.u1LeftLaneId, _x.u1RightLaneId,) = _get_struct_QIfHbB2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_QIfHbB2b = None
def _get_struct_QIfHbB2b():
    global _struct_QIfHbB2b
    if _struct_QIfHbB2b is None:
        _struct_QIfHbB2b = struct.Struct("<QIfHbB2b")
    return _struct_QIfHbB2b
