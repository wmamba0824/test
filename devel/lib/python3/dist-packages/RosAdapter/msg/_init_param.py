# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/init_param.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class init_param(genpy.Message):
  _md5sum = "d1c91c53dd3d6cc4f662b216093d05ec"
  _type = "RosAdapter/init_param"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# /** ------ 初始化参数 ------ */

string             au1OpenScenario
string             au1OpenDrive
uint64             u8StartRoadId
uint64             u8EndRoadId
float32            u4StartRoadS
float32            u4EndRoadS
float32            u4Speed
uint16             u2ScenarioId
int8               u1StartLaneId
int8               u1EndLaneId"""
  __slots__ = ['au1OpenScenario','au1OpenDrive','u8StartRoadId','u8EndRoadId','u4StartRoadS','u4EndRoadS','u4Speed','u2ScenarioId','u1StartLaneId','u1EndLaneId']
  _slot_types = ['string','string','uint64','uint64','float32','float32','float32','uint16','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       au1OpenScenario,au1OpenDrive,u8StartRoadId,u8EndRoadId,u4StartRoadS,u4EndRoadS,u4Speed,u2ScenarioId,u1StartLaneId,u1EndLaneId

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(init_param, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.au1OpenScenario is None:
        self.au1OpenScenario = ''
      if self.au1OpenDrive is None:
        self.au1OpenDrive = ''
      if self.u8StartRoadId is None:
        self.u8StartRoadId = 0
      if self.u8EndRoadId is None:
        self.u8EndRoadId = 0
      if self.u4StartRoadS is None:
        self.u4StartRoadS = 0.
      if self.u4EndRoadS is None:
        self.u4EndRoadS = 0.
      if self.u4Speed is None:
        self.u4Speed = 0.
      if self.u2ScenarioId is None:
        self.u2ScenarioId = 0
      if self.u1StartLaneId is None:
        self.u1StartLaneId = 0
      if self.u1EndLaneId is None:
        self.u1EndLaneId = 0
    else:
      self.au1OpenScenario = ''
      self.au1OpenDrive = ''
      self.u8StartRoadId = 0
      self.u8EndRoadId = 0
      self.u4StartRoadS = 0.
      self.u4EndRoadS = 0.
      self.u4Speed = 0.
      self.u2ScenarioId = 0
      self.u1StartLaneId = 0
      self.u1EndLaneId = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.au1OpenScenario
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.au1OpenDrive
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q3fH2b().pack(_x.u8StartRoadId, _x.u8EndRoadId, _x.u4StartRoadS, _x.u4EndRoadS, _x.u4Speed, _x.u2ScenarioId, _x.u1StartLaneId, _x.u1EndLaneId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1OpenScenario = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1OpenScenario = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1OpenDrive = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1OpenDrive = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.u8StartRoadId, _x.u8EndRoadId, _x.u4StartRoadS, _x.u4EndRoadS, _x.u4Speed, _x.u2ScenarioId, _x.u1StartLaneId, _x.u1EndLaneId,) = _get_struct_2Q3fH2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.au1OpenScenario
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.au1OpenDrive
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2Q3fH2b().pack(_x.u8StartRoadId, _x.u8EndRoadId, _x.u4StartRoadS, _x.u4EndRoadS, _x.u4Speed, _x.u2ScenarioId, _x.u1StartLaneId, _x.u1EndLaneId))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1OpenScenario = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1OpenScenario = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1OpenDrive = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1OpenDrive = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.u8StartRoadId, _x.u8EndRoadId, _x.u4StartRoadS, _x.u4EndRoadS, _x.u4Speed, _x.u2ScenarioId, _x.u1StartLaneId, _x.u1EndLaneId,) = _get_struct_2Q3fH2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Q3fH2b = None
def _get_struct_2Q3fH2b():
    global _struct_2Q3fH2b
    if _struct_2Q3fH2b is None:
        _struct_2Q3fH2b = struct.Struct("<2Q3fH2b")
    return _struct_2Q3fH2b
