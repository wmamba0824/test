# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/sensor_info.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import RosAdapter.msg

class sensor_info(genpy.Message):
  _md5sum = "e18318bc223ad24176de445906b697bb"
  _type = "RosAdapter/sensor_info"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# /** ------ 传感器定义和状态 ------ */
coord      sPos
coord      sOriginCoordSys
string     au1Name
uint32     u8HostId
uint32     u8Id
float32[]  au4FovHV
float32[]  au4ClipNF
float32[]  au4FovOffHV
uint8      u1Type                   
uint8      u1ModelType
float64	   u4IdealFreq
uint32	   u4ResL
uint32     u4ResV
float64	   u4SenSizeL
float64	   u4SenSizeW
float64	   u4LenFd
float64	   u4DistCenL
float64	   u4DistCenW
float64	   u4DistParK1
float64	   u4DistParK2

================================================================================
MSG: RosAdapter/coord
# /** ------ 坐标 ------ */
float64   u8X
float64   u8Y
float64   u8Z
float32   u4H
float32   u4P
float32   u4R
uint8     u1Type"""
  __slots__ = ['sPos','sOriginCoordSys','au1Name','u8HostId','u8Id','au4FovHV','au4ClipNF','au4FovOffHV','u1Type','u1ModelType','u4IdealFreq','u4ResL','u4ResV','u4SenSizeL','u4SenSizeW','u4LenFd','u4DistCenL','u4DistCenW','u4DistParK1','u4DistParK2']
  _slot_types = ['RosAdapter/coord','RosAdapter/coord','string','uint32','uint32','float32[]','float32[]','float32[]','uint8','uint8','float64','uint32','uint32','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sPos,sOriginCoordSys,au1Name,u8HostId,u8Id,au4FovHV,au4ClipNF,au4FovOffHV,u1Type,u1ModelType,u4IdealFreq,u4ResL,u4ResV,u4SenSizeL,u4SenSizeW,u4LenFd,u4DistCenL,u4DistCenW,u4DistParK1,u4DistParK2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sensor_info, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      if self.sOriginCoordSys is None:
        self.sOriginCoordSys = RosAdapter.msg.coord()
      if self.au1Name is None:
        self.au1Name = ''
      if self.u8HostId is None:
        self.u8HostId = 0
      if self.u8Id is None:
        self.u8Id = 0
      if self.au4FovHV is None:
        self.au4FovHV = []
      if self.au4ClipNF is None:
        self.au4ClipNF = []
      if self.au4FovOffHV is None:
        self.au4FovOffHV = []
      if self.u1Type is None:
        self.u1Type = 0
      if self.u1ModelType is None:
        self.u1ModelType = 0
      if self.u4IdealFreq is None:
        self.u4IdealFreq = 0.
      if self.u4ResL is None:
        self.u4ResL = 0
      if self.u4ResV is None:
        self.u4ResV = 0
      if self.u4SenSizeL is None:
        self.u4SenSizeL = 0.
      if self.u4SenSizeW is None:
        self.u4SenSizeW = 0.
      if self.u4LenFd is None:
        self.u4LenFd = 0.
      if self.u4DistCenL is None:
        self.u4DistCenL = 0.
      if self.u4DistCenW is None:
        self.u4DistCenW = 0.
      if self.u4DistParK1 is None:
        self.u4DistParK1 = 0.
      if self.u4DistParK2 is None:
        self.u4DistParK2 = 0.
    else:
      self.sPos = RosAdapter.msg.coord()
      self.sOriginCoordSys = RosAdapter.msg.coord()
      self.au1Name = ''
      self.u8HostId = 0
      self.u8Id = 0
      self.au4FovHV = []
      self.au4ClipNF = []
      self.au4FovOffHV = []
      self.u1Type = 0
      self.u1ModelType = 0
      self.u4IdealFreq = 0.
      self.u4ResL = 0
      self.u4ResV = 0
      self.u4SenSizeL = 0.
      self.u4SenSizeW = 0.
      self.u4LenFd = 0.
      self.u4DistCenL = 0.
      self.u4DistCenW = 0.
      self.u4DistParK1 = 0.
      self.u4DistParK2 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d3fB3d3fB().pack(_x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.sOriginCoordSys.u8X, _x.sOriginCoordSys.u8Y, _x.sOriginCoordSys.u8Z, _x.sOriginCoordSys.u4H, _x.sOriginCoordSys.u4P, _x.sOriginCoordSys.u4R, _x.sOriginCoordSys.u1Type))
      _x = self.au1Name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.u8HostId, _x.u8Id))
      length = len(self.au4FovHV)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.au4FovHV))
      length = len(self.au4ClipNF)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.au4ClipNF))
      length = len(self.au4FovOffHV)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.au4FovOffHV))
      _x = self
      buff.write(_get_struct_2Bd2I7d().pack(_x.u1Type, _x.u1ModelType, _x.u4IdealFreq, _x.u4ResL, _x.u4ResV, _x.u4SenSizeL, _x.u4SenSizeW, _x.u4LenFd, _x.u4DistCenL, _x.u4DistCenW, _x.u4DistParK1, _x.u4DistParK2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      if self.sOriginCoordSys is None:
        self.sOriginCoordSys = RosAdapter.msg.coord()
      end = 0
      _x = self
      start = end
      end += 74
      (_x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.sOriginCoordSys.u8X, _x.sOriginCoordSys.u8Y, _x.sOriginCoordSys.u8Z, _x.sOriginCoordSys.u4H, _x.sOriginCoordSys.u4P, _x.sOriginCoordSys.u4R, _x.sOriginCoordSys.u1Type,) = _get_struct_3d3fB3d3fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1Name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1Name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.u8HostId, _x.u8Id,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.au4FovHV = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.au4ClipNF = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.au4FovOffHV = s.unpack(str[start:end])
      _x = self
      start = end
      end += 74
      (_x.u1Type, _x.u1ModelType, _x.u4IdealFreq, _x.u4ResL, _x.u4ResV, _x.u4SenSizeL, _x.u4SenSizeW, _x.u4LenFd, _x.u4DistCenL, _x.u4DistCenW, _x.u4DistParK1, _x.u4DistParK2,) = _get_struct_2Bd2I7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d3fB3d3fB().pack(_x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.sOriginCoordSys.u8X, _x.sOriginCoordSys.u8Y, _x.sOriginCoordSys.u8Z, _x.sOriginCoordSys.u4H, _x.sOriginCoordSys.u4P, _x.sOriginCoordSys.u4R, _x.sOriginCoordSys.u1Type))
      _x = self.au1Name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.u8HostId, _x.u8Id))
      length = len(self.au4FovHV)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.au4FovHV.tostring())
      length = len(self.au4ClipNF)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.au4ClipNF.tostring())
      length = len(self.au4FovOffHV)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.au4FovOffHV.tostring())
      _x = self
      buff.write(_get_struct_2Bd2I7d().pack(_x.u1Type, _x.u1ModelType, _x.u4IdealFreq, _x.u4ResL, _x.u4ResV, _x.u4SenSizeL, _x.u4SenSizeW, _x.u4LenFd, _x.u4DistCenL, _x.u4DistCenW, _x.u4DistParK1, _x.u4DistParK2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.sPos is None:
        self.sPos = RosAdapter.msg.coord()
      if self.sOriginCoordSys is None:
        self.sOriginCoordSys = RosAdapter.msg.coord()
      end = 0
      _x = self
      start = end
      end += 74
      (_x.sPos.u8X, _x.sPos.u8Y, _x.sPos.u8Z, _x.sPos.u4H, _x.sPos.u4P, _x.sPos.u4R, _x.sPos.u1Type, _x.sOriginCoordSys.u8X, _x.sOriginCoordSys.u8Y, _x.sOriginCoordSys.u8Z, _x.sOriginCoordSys.u4H, _x.sOriginCoordSys.u4P, _x.sOriginCoordSys.u4R, _x.sOriginCoordSys.u1Type,) = _get_struct_3d3fB3d3fB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.au1Name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.au1Name = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.u8HostId, _x.u8Id,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.au4FovHV = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.au4ClipNF = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.au4FovOffHV = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 74
      (_x.u1Type, _x.u1ModelType, _x.u4IdealFreq, _x.u4ResL, _x.u4ResV, _x.u4SenSizeL, _x.u4SenSizeW, _x.u4LenFd, _x.u4DistCenL, _x.u4DistCenW, _x.u4DistParK1, _x.u4DistParK2,) = _get_struct_2Bd2I7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bd2I7d = None
def _get_struct_2Bd2I7d():
    global _struct_2Bd2I7d
    if _struct_2Bd2I7d is None:
        _struct_2Bd2I7d = struct.Struct("<2Bd2I7d")
    return _struct_2Bd2I7d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d3fB3d3fB = None
def _get_struct_3d3fB3d3fB():
    global _struct_3d3fB3d3fB
    if _struct_3d3fB3d3fB is None:
        _struct_3d3fB3d3fB = struct.Struct("<3d3fB3d3fB")
    return _struct_3d3fB3d3fB
