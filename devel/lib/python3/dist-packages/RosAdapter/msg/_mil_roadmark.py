# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from RosAdapter/mil_roadmark.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mil_roadmark(genpy.Message):
  _md5sum = "7aee4a86eef20d62dcd9e9c417a01ceb"
  _type = "RosAdapter/mil_roadmark"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ # /** ------ MIL测试车道线信息描述包 ------ */

uint64  u8RoadId
float64 curvVert
float32 u4StartDx
float32 u4Width
float32 u4ViewRangeStart
float32 u4ViewRangeEnd
float32 u4MeasuredVREnd
float32 u4C0
float32 u4C1
float32 u4C2
float32 u4C3
uint16  u2LaneChange
int8    u1LaneId
uint8   u1Quality
uint8   u1Type
uint8   u1Color
uint8   u1LeftCrossing
uint8   u1RightCrossing"""
  __slots__ = ['u8RoadId','curvVert','u4StartDx','u4Width','u4ViewRangeStart','u4ViewRangeEnd','u4MeasuredVREnd','u4C0','u4C1','u4C2','u4C3','u2LaneChange','u1LaneId','u1Quality','u1Type','u1Color','u1LeftCrossing','u1RightCrossing']
  _slot_types = ['uint64','float64','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint16','int8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       u8RoadId,curvVert,u4StartDx,u4Width,u4ViewRangeStart,u4ViewRangeEnd,u4MeasuredVREnd,u4C0,u4C1,u4C2,u4C3,u2LaneChange,u1LaneId,u1Quality,u1Type,u1Color,u1LeftCrossing,u1RightCrossing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mil_roadmark, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.u8RoadId is None:
        self.u8RoadId = 0
      if self.curvVert is None:
        self.curvVert = 0.
      if self.u4StartDx is None:
        self.u4StartDx = 0.
      if self.u4Width is None:
        self.u4Width = 0.
      if self.u4ViewRangeStart is None:
        self.u4ViewRangeStart = 0.
      if self.u4ViewRangeEnd is None:
        self.u4ViewRangeEnd = 0.
      if self.u4MeasuredVREnd is None:
        self.u4MeasuredVREnd = 0.
      if self.u4C0 is None:
        self.u4C0 = 0.
      if self.u4C1 is None:
        self.u4C1 = 0.
      if self.u4C2 is None:
        self.u4C2 = 0.
      if self.u4C3 is None:
        self.u4C3 = 0.
      if self.u2LaneChange is None:
        self.u2LaneChange = 0
      if self.u1LaneId is None:
        self.u1LaneId = 0
      if self.u1Quality is None:
        self.u1Quality = 0
      if self.u1Type is None:
        self.u1Type = 0
      if self.u1Color is None:
        self.u1Color = 0
      if self.u1LeftCrossing is None:
        self.u1LeftCrossing = 0
      if self.u1RightCrossing is None:
        self.u1RightCrossing = 0
    else:
      self.u8RoadId = 0
      self.curvVert = 0.
      self.u4StartDx = 0.
      self.u4Width = 0.
      self.u4ViewRangeStart = 0.
      self.u4ViewRangeEnd = 0.
      self.u4MeasuredVREnd = 0.
      self.u4C0 = 0.
      self.u4C1 = 0.
      self.u4C2 = 0.
      self.u4C3 = 0.
      self.u2LaneChange = 0
      self.u1LaneId = 0
      self.u1Quality = 0
      self.u1Type = 0
      self.u1Color = 0
      self.u1LeftCrossing = 0
      self.u1RightCrossing = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Qd9fHb5B().pack(_x.u8RoadId, _x.curvVert, _x.u4StartDx, _x.u4Width, _x.u4ViewRangeStart, _x.u4ViewRangeEnd, _x.u4MeasuredVREnd, _x.u4C0, _x.u4C1, _x.u4C2, _x.u4C3, _x.u2LaneChange, _x.u1LaneId, _x.u1Quality, _x.u1Type, _x.u1Color, _x.u1LeftCrossing, _x.u1RightCrossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.u8RoadId, _x.curvVert, _x.u4StartDx, _x.u4Width, _x.u4ViewRangeStart, _x.u4ViewRangeEnd, _x.u4MeasuredVREnd, _x.u4C0, _x.u4C1, _x.u4C2, _x.u4C3, _x.u2LaneChange, _x.u1LaneId, _x.u1Quality, _x.u1Type, _x.u1Color, _x.u1LeftCrossing, _x.u1RightCrossing,) = _get_struct_Qd9fHb5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Qd9fHb5B().pack(_x.u8RoadId, _x.curvVert, _x.u4StartDx, _x.u4Width, _x.u4ViewRangeStart, _x.u4ViewRangeEnd, _x.u4MeasuredVREnd, _x.u4C0, _x.u4C1, _x.u4C2, _x.u4C3, _x.u2LaneChange, _x.u1LaneId, _x.u1Quality, _x.u1Type, _x.u1Color, _x.u1LeftCrossing, _x.u1RightCrossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.u8RoadId, _x.curvVert, _x.u4StartDx, _x.u4Width, _x.u4ViewRangeStart, _x.u4ViewRangeEnd, _x.u4MeasuredVREnd, _x.u4C0, _x.u4C1, _x.u4C2, _x.u4C3, _x.u2LaneChange, _x.u1LaneId, _x.u1Quality, _x.u1Type, _x.u1Color, _x.u1LeftCrossing, _x.u1RightCrossing,) = _get_struct_Qd9fHb5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Qd9fHb5B = None
def _get_struct_Qd9fHb5B():
    global _struct_Qd9fHb5B
    if _struct_Qd9fHb5B is None:
        _struct_Qd9fHb5B = struct.Struct("<Qd9fHb5B")
    return _struct_Qd9fHb5B
